/* The following code was generated by JFlex 1.4.3 on 7/6/23, 20:32 */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/6/23, 20:32 from the specification file
 * <tt>C:/Users/pc/Desktop/Java/AnalizadorSintactico/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\65\1\41\1\6\1\55"+
    "\1\0\1\44\1\37\1\0\1\45\1\46\1\36\1\34\1\64\1\35"+
    "\1\0\1\4\12\2\1\7\1\54\1\43\1\33\1\42\2\0\22\1"+
    "\1\27\7\1\1\51\1\0\1\52\1\0\1\60\1\0\1\16\1\10"+
    "\1\14\1\25\1\13\1\24\1\23\1\15\1\30\1\1\1\57\1\20"+
    "\1\53\1\22\1\21\1\56\1\1\1\17\1\31\1\12\1\26\1\62"+
    "\1\32\1\61\1\11\1\63\1\47\1\40\1\50\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\20\2\1\11\1\12\1\13\1\14\3\15\2\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\2"+
    "\1\25\1\1\2\2\1\26\1\4\1\27\1\0\1\30"+
    "\31\2\1\31\4\2\1\32\5\2\1\16\1\33\1\15"+
    "\1\34\3\0\1\35\1\0\2\2\1\0\13\2\1\36"+
    "\7\2\1\37\1\40\5\2\1\41\4\2\1\42\12\2"+
    "\1\43\5\2\7\0\2\2\1\0\6\2\1\44\1\2"+
    "\1\45\3\2\1\46\1\47\1\50\2\2\1\51\1\52"+
    "\26\2\6\0\1\3\1\53\1\2\1\0\4\2\1\54"+
    "\1\2\1\55\4\2\1\56\1\2\1\57\10\2\1\60"+
    "\1\2\1\61\4\2\1\62\3\2\1\63\7\0\1\2"+
    "\1\0\7\2\1\64\2\2\1\65\4\2\1\66\3\2"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\5\0"+
    "\1\2\1\0\2\2\1\76\3\2\1\77\7\2\1\100"+
    "\2\2\1\101\3\0\1\102\1\0\1\2\1\103\1\2"+
    "\1\104\1\105\1\106\1\107\1\110\1\2\1\111\2\2"+
    "\1\112\1\2\1\113\1\2\1\114\1\2\1\115\2\2"+
    "\1\116\5\2\1\117\1\2\1\120\3\2\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\66\0\u0144"+
    "\0\66\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u04da"+
    "\0\u061e\0\u0654\0\u057c\0\u068a\0\66\0\66\0\66\0\66"+
    "\0\66\0\u06c0\0\66\0\u06f6\0\u072c\0\u0762\0\66\0\u0798"+
    "\0\66\0\u0144\0\66\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\154\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\66"+
    "\0\66\0\66\0\66\0\u0f30\0\u0f66\0\u0f9c\0\66\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\154\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\154\0\154"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\154\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\154\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\154\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e"+
    "\0\u1c44\0\u1c7a\0\u1cb0\0\154\0\u1ce6\0\154\0\u1d1c\0\u1d52"+
    "\0\u1d88\0\154\0\154\0\154\0\u1dbe\0\u1df4\0\154\0\154"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304"+
    "\0\u233a\0\u2370\0\u23a6\0\u23dc\0\66\0\154\0\u2412\0\u2448"+
    "\0\u247e\0\u24b4\0\u24ea\0\u2520\0\154\0\u2556\0\154\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\154\0\u2664\0\154\0\u269a\0\u26d0"+
    "\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\154\0\u284a"+
    "\0\154\0\u2880\0\u28b6\0\u28ec\0\u2922\0\154\0\u2958\0\u298e"+
    "\0\u29c4\0\154\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8"+
    "\0\u2cee\0\u2d24\0\154\0\u2d5a\0\u2d90\0\154\0\u2dc6\0\u2dfc"+
    "\0\u2e32\0\u2e68\0\154\0\u2e9e\0\u2ed4\0\u2f0a\0\154\0\154"+
    "\0\u2f40\0\154\0\154\0\154\0\154\0\u2f76\0\u2fac\0\u2fe2"+
    "\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\154\0\u315c"+
    "\0\u3192\0\u31c8\0\154\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6"+
    "\0\u330c\0\u3342\0\154\0\u3378\0\u33ae\0\66\0\u33e4\0\u341a"+
    "\0\u3450\0\154\0\u3486\0\u34bc\0\154\0\u34f2\0\154\0\154"+
    "\0\154\0\154\0\154\0\u3528\0\154\0\u355e\0\u3594\0\154"+
    "\0\u35ca\0\66\0\u3600\0\154\0\u3636\0\154\0\u366c\0\u36a2"+
    "\0\154\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\154\0\u37e6"+
    "\0\154\0\u381c\0\u3852\0\u3888\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\1\22\1\3\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\3\3"+
    "\1\56\1\3\2\5\67\0\2\3\5\0\23\3\20\0"+
    "\1\3\2\0\6\3\1\57\3\0\1\4\66\0\1\5"+
    "\60\0\2\5\4\0\1\60\26\0\1\61\33\0\2\62"+
    "\3\0\1\63\1\0\23\62\20\0\1\62\2\0\6\62"+
    "\1\0\1\62\1\0\2\3\5\0\1\3\1\64\5\3"+
    "\1\65\1\3\1\66\11\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\1\3\1\67\1\3\1\70"+
    "\1\3\1\71\1\3\1\72\13\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\10\3\1\73\12\3"+
    "\20\0\1\3\2\0\3\3\1\74\2\3\1\57\2\0"+
    "\2\3\5\0\5\3\1\75\1\76\2\3\1\77\6\3"+
    "\1\100\2\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\21\3\1\101\1\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\3\3\1\102\17\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\11\3\1\103\11\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\23\3\20\0\1\3\2\0\1\104"+
    "\5\3\1\57\2\0\2\3\5\0\3\3\1\105\2\3"+
    "\1\106\14\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\6\3\1\107\1\110\1\111\1\112\11\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\1\3\1\113\1\3\1\114\5\3\1\115\11\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\12\3"+
    "\1\116\6\3\1\117\1\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\2\3\1\120\20\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\12\3"+
    "\1\121\1\3\1\122\6\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\2\3\1\123\2\3\1\124"+
    "\12\3\1\125\1\3\1\126\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\5\3\1\127\15\3\20\0"+
    "\1\3\2\0\6\3\1\57\34\0\1\130\65\0\1\61"+
    "\1\131\64\0\1\61\1\0\1\131\63\0\1\61\71\0"+
    "\1\132\66\0\1\132\60\0\1\130\6\0\1\133\37\0"+
    "\1\134\2\0\1\135\10\0\1\136\2\0\1\130\7\0"+
    "\1\137\57\0\1\140\31\0\2\3\5\0\6\3\1\141"+
    "\7\3\1\142\4\3\20\0\1\3\2\0\6\3\1\57"+
    "\31\0\1\143\36\0\2\3\5\0\7\3\1\144\6\3"+
    "\1\145\4\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\11\3\1\146\6\3\1\147\2\3\20\0"+
    "\1\3\2\0\6\3\1\57\1\0\5\60\1\0\60\60"+
    "\1\0\2\3\5\0\2\3\1\150\20\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\3\3\1\151"+
    "\17\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\11\3\1\152\11\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\23\3\20\0\1\3\2\0"+
    "\1\153\5\3\1\57\2\0\2\3\5\0\23\3\20\0"+
    "\1\154\2\0\6\3\1\57\2\0\2\3\5\0\7\3"+
    "\1\155\10\3\1\156\2\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\1\3\1\157\14\3\1\160"+
    "\4\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\21\3\1\161\1\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\23\3\20\0\1\3\2\0"+
    "\1\162\5\3\1\57\2\0\2\3\5\0\6\3\1\163"+
    "\14\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\2\3\1\164\16\3\1\165\1\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\16\3\1\166"+
    "\4\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\12\3\1\167\10\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\23\3\20\0\1\170\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\2\3\1\171\10\3"+
    "\1\172\4\3\1\173\2\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\12\3\1\174\10\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\3\3"+
    "\1\175\17\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\22\3\1\176\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\23\3\20\0\1\177\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\10\3\1\200\12\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\20\3\1\201\2\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\11\3\1\202\11\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\7\3\1\203"+
    "\13\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\12\3\1\204\10\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\14\3\1\205\6\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\16\3"+
    "\1\206\4\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\20\3\1\207\1\210\1\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\20\3\1\211"+
    "\2\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\7\3\1\212\13\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\10\3\1\213\12\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\6\3"+
    "\1\214\1\215\5\3\1\216\5\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\11\3\1\217\11\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\13\3\1\220\7\3\20\0\1\3\2\0\5\3\1\221"+
    "\1\57\2\0\2\3\5\0\20\3\1\222\2\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\20\3"+
    "\1\223\2\3\20\0\1\3\2\0\6\3\1\57\13\0"+
    "\1\224\1\0\1\225\14\0\1\226\21\0\1\227\30\0"+
    "\1\230\70\0\1\231\46\0\1\232\64\0\2\3\5\0"+
    "\20\3\1\233\2\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\2\3\1\234\20\3\20\0\1\3"+
    "\2\0\6\3\1\57\23\0\1\235\44\0\2\3\5\0"+
    "\11\3\1\236\6\3\1\237\2\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\1\240\22\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\10\3"+
    "\1\241\7\3\1\242\2\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\7\3\1\243\13\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\3\3"+
    "\1\244\17\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\6\3\1\245\14\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\10\3\1\246\12\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\3\3\1\247\17\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\23\3\20\0\1\3\2\0\1\250"+
    "\5\3\1\57\2\0\2\3\5\0\11\3\1\251\11\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\21\3\1\252\1\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\3\3\1\253\17\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\3\3\1\254"+
    "\17\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\10\3\1\255\12\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\7\3\1\244\13\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\4\3"+
    "\1\256\16\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\3\3\1\257\17\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\2\3\1\260\20\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\16\3\1\261\4\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\20\3\1\262\2\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\12\3\1\263"+
    "\10\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\13\3\1\244\7\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\7\3\1\264\13\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\3\3"+
    "\1\265\17\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\21\3\1\160\1\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\3\3\1\266\17\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\6\3\1\267\14\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\6\3\1\270\14\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\6\3\1\271"+
    "\14\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\1\272\22\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\11\3\1\273\11\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\20\3\1\274"+
    "\2\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\12\3\1\275\10\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\20\3\1\276\2\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\20\3"+
    "\1\277\2\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\2\3\1\300\20\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\16\3\1\301\4\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\7\3\1\302\13\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\12\3\1\303\10\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\3\3\1\304"+
    "\17\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\2\3\1\305\20\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\10\3\1\306\12\3\20\0"+
    "\1\3\2\0\6\3\1\57\31\0\1\307\47\0\1\310"+
    "\65\0\1\311\71\0\1\312\71\0\1\313\74\0\1\314"+
    "\36\0\1\232\43\0\1\315\20\0\2\3\5\0\12\3"+
    "\1\316\10\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\6\3\1\317\14\3\20\0\1\3\2\0"+
    "\6\3\1\57\15\0\1\320\52\0\2\3\5\0\2\3"+
    "\1\321\20\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\23\3\20\0\1\3\2\0\4\3\1\322"+
    "\1\3\1\57\2\0\2\3\5\0\10\3\1\323\12\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\6\3\1\324\14\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\15\3\1\325\5\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\2\3\1\326"+
    "\20\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\23\3\20\0\1\3\2\0\1\3\1\327\4\3"+
    "\1\57\2\0\2\3\5\0\12\3\1\330\2\3\1\331"+
    "\2\3\1\332\2\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\10\3\1\333\12\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\22\3\1\334"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\20\3\1\335\2\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\5\3\1\336\15\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\7\3\1\337"+
    "\13\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\21\3\1\340\1\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\2\3\1\341\20\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\6\3"+
    "\1\342\14\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\21\3\1\343\1\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\12\3\1\344\10\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\2\3\1\244\20\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\23\3\20\0\1\345\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\16\3\1\346\4\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\10\3"+
    "\1\150\12\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\12\3\1\347\10\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\13\3\1\350\7\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\13\3\1\351\7\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\12\3\1\352\10\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\12\3\1\353"+
    "\10\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\20\3\1\354\2\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\4\3\1\355\16\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\2\3"+
    "\1\356\20\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\3\3\1\357\17\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\11\3\1\360\11\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\4\3\1\361\16\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\3\3\1\362\17\3\20\0\1\3"+
    "\2\0\6\3\1\57\54\0\1\363\23\0\1\364\73\0"+
    "\1\365\5\0\1\366\52\0\1\367\100\0\1\370\52\0"+
    "\1\371\54\0\2\3\5\0\1\372\22\3\20\0\1\3"+
    "\2\0\6\3\1\57\21\0\1\373\46\0\2\3\5\0"+
    "\3\3\1\374\17\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\6\3\1\375\14\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\20\3\1\376"+
    "\2\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\2\3\1\377\20\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\16\3\1\u0100\4\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\6\3"+
    "\1\u0101\14\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\3\3\1\u0102\17\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\15\3\1\u0103\5\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\6\3\1\u0104\14\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\4\3\1\u0105\16\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\12\3\1\u0106"+
    "\10\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\2\3\1\u0107\20\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\3\3\1\u0108\17\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\2\3"+
    "\1\u0109\20\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\23\3\20\0\1\3\2\0\1\u010a\5\3"+
    "\1\57\2\0\2\3\5\0\15\3\1\u010b\5\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\20\3"+
    "\1\u010c\2\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\10\3\1\u010d\12\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\12\3\1\u010e\10\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\13\3\1\u010f\7\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\3\3\1\u0110\17\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\4\3\1\u0111"+
    "\16\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\2\3\1\u0112\20\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\15\3\1\u0113\5\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\14\3"+
    "\1\u0114\6\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\5\3\1\u0115\15\3\20\0\1\3\2\0"+
    "\6\3\1\57\14\0\1\u0116\130\0\1\363\37\0\1\u0117"+
    "\55\0\1\u0118\62\0\1\u0116\71\0\1\u0119\63\0\1\u011a"+
    "\47\0\2\3\5\0\10\3\1\u011b\12\3\20\0\1\3"+
    "\2\0\6\3\1\57\27\0\1\u011c\40\0\2\3\5\0"+
    "\4\3\1\u011d\16\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\2\3\1\u011e\20\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\4\3\1\u011f"+
    "\16\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\20\3\1\u0120\2\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\6\3\1\u0121\14\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\23\3"+
    "\20\0\1\u0122\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\14\3\1\u0123\6\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\2\3\1\u0124\20\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\20\3\1\u0125"+
    "\2\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\3\3\1\u0126\17\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\7\3\1\u0127\13\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\11\3"+
    "\1\u0128\11\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\6\3\1\u0129\14\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\4\3\1\u012a\16\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\2\3\1\u012b\20\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\3\3\1\u012c\17\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\23\3\20\0"+
    "\1\3\2\0\2\3\1\u012d\3\3\1\57\43\0\1\u012e"+
    "\45\0\1\u012f\73\0\1\u0130\110\0\1\u0116\25\0\1\u0131"+
    "\53\0\2\3\5\0\3\3\1\u0132\17\3\20\0\1\3"+
    "\2\0\6\3\1\57\26\0\1\u0133\41\0\2\3\5\0"+
    "\2\3\1\u0134\20\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\3\3\1\u0135\17\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\10\3\1\u0136"+
    "\12\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\10\3\1\u0137\12\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\3\3\1\u0138\17\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\3\3"+
    "\1\u0139\17\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\2\3\1\u013a\20\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\7\3\1\u013b\13\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\23\3\20\0\1\3\2\0\1\u013c\5\3\1\57\2\0"+
    "\2\3\5\0\7\3\1\u013d\13\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\4\3\1\u013e\16\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\23\3\20\0\1\3\2\0\2\3\1\u013f\3\3\1\57"+
    "\2\0\2\3\5\0\15\3\1\u0140\5\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\4\3\1\u0141"+
    "\16\3\20\0\1\3\2\0\6\3\1\57\24\0\1\u0116"+
    "\52\0\1\u0116\73\0\1\u0119\62\0\1\u0142\53\0\2\3"+
    "\5\0\3\3\1\u0143\17\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\3\3\1\u0144\17\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\7\3"+
    "\1\u0145\13\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\3\3\1\u0146\17\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\4\3\1\u0147\16\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\6\3\1\u0148\14\3\20\0\1\3\2\0\6\3\1\57"+
    "\2\0\2\3\5\0\15\3\1\u0149\5\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\3\3\1\u014a"+
    "\17\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\6\3\1\u014b\14\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\21\3\1\u014c\1\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\2\3"+
    "\1\u014d\20\3\20\0\1\3\2\0\6\3\1\57\2\0"+
    "\2\3\5\0\21\3\1\u014e\1\3\20\0\1\3\2\0"+
    "\6\3\1\57\2\0\2\3\5\0\2\3\1\u014f\20\3"+
    "\20\0\1\3\2\0\6\3\1\57\2\0\2\3\5\0"+
    "\23\3\20\0\1\3\2\0\2\3\1\u0150\3\3\1\57"+
    "\2\0\2\3\5\0\2\3\1\u0151\20\3\20\0\1\3"+
    "\2\0\6\3\1\57\2\0\2\3\5\0\4\3\1\u0152"+
    "\16\3\20\0\1\3\2\0\6\3\1\57\2\0\2\3"+
    "\5\0\6\3\1\u0153\14\3\20\0\1\3\2\0\6\3"+
    "\1\57\2\0\2\3\5\0\21\3\1\u0154\1\3\20\0"+
    "\1\3\2\0\6\3\1\57\2\0\2\3\5\0\2\3"+
    "\1\u0155\20\3\20\0\1\3\2\0\6\3\1\57\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14526];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\33\1\5\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\0\1\11"+
    "\44\1\4\11\3\0\1\11\1\0\2\1\1\0\60\1"+
    "\7\0\2\1\1\0\51\1\6\0\1\11\2\1\1\0"+
    "\42\1\7\0\1\1\1\0\32\1\5\0\1\1\1\0"+
    "\21\1\1\11\3\0\1\1\1\0\16\1\1\11\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { lexeme=yytext(); return Doble_Menor;
          }
        case 82: break;
        case 48: 
          { lexeme=yytext(); return Union;
          }
        case 83: break;
        case 51: 
          { lexeme=yytext(); return While;
          }
        case 84: break;
        case 60: 
          { lexeme=yytext(); return Sizeof;
          }
        case 85: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 86: break;
        case 28: 
          { lexeme=yytext(); return Doble_Mayor;
          }
        case 87: break;
        case 42: 
          { lexeme=yytext(); return Cout;
          }
        case 88: break;
        case 45: 
          { lexeme=yytext(); return Break;
          }
        case 89: break;
        case 15: 
          { lexeme=yytext(); return Parentesis_a;
          }
        case 90: break;
        case 76: 
          { lexeme=yytext(); return Volatile;
          }
        case 91: break;
        case 40: 
          { lexeme=yytext(); return Else;
          }
        case 92: break;
        case 74: 
          { lexeme=yytext(); return Unsigned;
          }
        case 93: break;
        case 43: 
          { lexeme=yytext(); return Main;
          }
        case 94: break;
        case 41: 
          { lexeme=yytext(); return Case;
          }
        case 95: break;
        case 38: 
          { lexeme=yytext(); return This;
          }
        case 96: break;
        case 4: 
          { /*Ignore*/
          }
        case 97: break;
        case 79: 
          { lexeme=yytext(); return Static_cast;
          }
        case 98: break;
        case 49: 
          { lexeme=yytext(); return Using;
          }
        case 99: break;
        case 32: 
          { lexeme=yytext(); return Asm;
          }
        case 100: break;
        case 13: 
          { lexeme=yytext(); return Op_logico;
          }
        case 101: break;
        case 67: 
          { lexeme=yytext(); return Private;
          }
        case 102: break;
        case 66: 
          { lexeme=yytext(); return Mutable;
          }
        case 103: break;
        case 54: 
          { lexeme=yytext(); return Friend;
          }
        case 104: break;
        case 47: 
          { lexeme=yytext(); return Catch;
          }
        case 105: break;
        case 81: 
          { lexeme=yytext(); return Reinterpret_cast;
          }
        case 106: break;
        case 72: 
          { lexeme=yytext(); return Register;
          }
        case 107: break;
        case 18: 
          { lexeme=yytext(); return Llave_c;
          }
        case 108: break;
        case 20: 
          { lexeme = yytext(); return Corchete_c;
          }
        case 109: break;
        case 1: 
          { return ERROR;
          }
        case 110: break;
        case 33: 
          { lexeme=yytext(); return New;
          }
        case 111: break;
        case 39: 
          { lexeme = yytext(); return Op_booleano;
          }
        case 112: break;
        case 25: 
          { lexeme=yytext(); return Do;
          }
        case 113: break;
        case 21: 
          { lexeme=yytext(); return P_coma;
          }
        case 114: break;
        case 31: 
          { lexeme=yytext(); return Cin;
          }
        case 115: break;
        case 11: 
          { lexeme=yytext(); return Resta;
          }
        case 116: break;
        case 14: 
          { lexeme = yytext(); return Op_relacional;
          }
        case 117: break;
        case 68: 
          { lexeme=yytext(); return Virtual;
          }
        case 118: break;
        case 24: 
          { lexeme=yytext(); return Palabra;
          }
        case 119: break;
        case 22: 
          { lexeme=yytext(); return Variables;
          }
        case 120: break;
        case 44: 
          { lexeme=yytext(); return Void;
          }
        case 121: break;
        case 59: 
          { lexeme=yytext(); return Signed;
          }
        case 122: break;
        case 35: 
          { lexeme=yytext(); return Espacio_de_Nombre;
          }
        case 123: break;
        case 56: 
          { lexeme=yytext(); return Inline;
          }
        case 124: break;
        case 9: 
          { lexeme=yytext(); return Igual;
          }
        case 125: break;
        case 57: 
          { lexeme=yytext(); return Static;
          }
        case 126: break;
        case 55: 
          { lexeme=yytext(); return Cadena;
          }
        case 127: break;
        case 10: 
          { lexeme=yytext(); return Suma;
          }
        case 128: break;
        case 27: 
          { lexeme = yytext(); return Op_incremento;
          }
        case 129: break;
        case 69: 
          { lexeme=yytext(); return Typename;
          }
        case 130: break;
        case 63: 
          { lexeme=yytext(); return Typedef;
          }
        case 131: break;
        case 36: 
          { lexeme=yytext(); return T_dato;
          }
        case 132: break;
        case 23: 
          { lexeme = yytext(); return Op_atribucion;
          }
        case 133: break;
        case 75: 
          { lexeme=yytext(); return Include;
          }
        case 134: break;
        case 17: 
          { lexeme=yytext(); return Llave_a;
          }
        case 135: break;
        case 53: 
          { lexeme=yytext(); return Return;
          }
        case 136: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 137: break;
        case 52: 
          { lexeme=yytext(); return Typeid;
          }
        case 138: break;
        case 34: 
          { lexeme=yytext(); return For;
          }
        case 139: break;
        case 19: 
          { lexeme = yytext(); return Corchete_a;
          }
        case 140: break;
        case 26: 
          { lexeme=yytext(); return If;
          }
        case 141: break;
        case 70: 
          { lexeme=yytext(); return Template;
          }
        case 142: break;
        case 37: 
          { lexeme=yytext(); return Bool;
          }
        case 143: break;
        case 6: 
          { return Linea;
          }
        case 144: break;
        case 46: 
          { lexeme=yytext(); return Throw;
          }
        case 145: break;
        case 16: 
          { lexeme=yytext(); return Parentesis_c;
          }
        case 146: break;
        case 58: 
          { lexeme=yytext(); return Struct;
          }
        case 147: break;
        case 8: 
          { lexeme=yytext(); return Dos_P;
          }
        case 148: break;
        case 64: 
          { lexeme=yytext(); return Default;
          }
        case 149: break;
        case 62: 
          { lexeme=yytext(); return Public;
          }
        case 150: break;
        case 65: 
          { lexeme=yytext(); return Libreria;
          }
        case 151: break;
        case 77: 
          { lexeme=yytext(); return NameSpace;
          }
        case 152: break;
        case 30: 
          { lexeme=yytext(); return Try;
          }
        case 153: break;
        case 80: 
          { lexeme=yytext(); return Dynamic_cast;
          }
        case 154: break;
        case 73: 
          { lexeme=yytext(); return Operator;
          }
        case 155: break;
        case 61: 
          { lexeme=yytext(); return Switch;
          }
        case 156: break;
        case 7: 
          { lexeme=yytext(); return Comillas;
          }
        case 157: break;
        case 78: 
          { lexeme=yytext(); return Protected;
          }
        case 158: break;
        case 5: 
          { lexeme=yytext(); return Division;
          }
        case 159: break;
        case 50: 
          { lexeme=yytext(); return Short;
          }
        case 160: break;
        case 12: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 161: break;
        case 71: 
          { lexeme=yytext(); return Explicit;
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
