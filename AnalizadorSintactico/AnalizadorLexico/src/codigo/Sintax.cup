package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas,Cin,Doble_Mayor, T_dato, Int, Cadena, If, Else, Do,Dos_P, While, For,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a,Corchete_c, Main,Cout, P_coma, Identificador,Using,NameSpace, Espacio_de_Nombre, 
    Numero,Palabra,Doble_Menor,Include,Libreria, Default,
    Case,Asm,Auto,Break,Catch,Char,Class,Cons_cast,Const,Continue,Delete,
    Dynamic_cast,Explicit,False,Friend,Inline,Long,Mutable,New,Operator,
    Private,Protected,Public,Register,Reinterpret_cast,Return,Short,Signed,
    Sizeof,Static,Static_cast,Struct,Switch,Template,This,Throw,True,Try,Typedef,Typeid,
    Typename,Union, Unsigned,Variables,Virtual,Void,Volatile,Bool,  ERROR;


    non terminal  INICIO, MAIN ,VARIABLE, SENTENCIA, DECLARACION,ESPACIOS_NOMBRE, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, SALIDA_ENTRADA,SWITCH, SENTENCIA_SWITCH;

start with INICIO;

INICIO::=
    Include Libreria ESPACIOS_NOMBRE MAIN
;
ESPACIOS_NOMBRE::=
    Using NameSpace Espacio_de_Nombre P_coma
;
MAIN ::= 
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR |
    SWITCH |
    SENTENCIA SWITCH |
    SENTENCIA SALIDA_ENTRADA |
    SALIDA_ENTRADA
;
DECLARACION ::= 
    Int VARIABLE P_coma | 
    Int VARIABLE Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 
    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma
;
VARIABLE ::= 
        Identificador | 
        Variables VARIABLE
;

IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;
FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_SWITCH Llave_c
;
SENTENCIA_SWITCH ::= 
    Case Numero Dos_P SENTENCIA Break P_coma |
    SENTENCIA_SWITCH Case Numero Dos_P SENTENCIA Break P_coma 
;

SALIDA_ENTRADA::= 
    Cout Doble_Menor Identificador P_coma |
    Cout Doble_Menor Palabra Doble_Menor Identificador P_coma |
    Cout Doble_Menor Palabra P_coma |
    Cin Doble_Mayor Identificador P_coma
;

DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;