
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 30 04:19:39 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 30 04:19:39 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\006\000\002\007" +
    "\006\000\002\003\011\000\002\003\010\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\005\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\006\005\000\002\006\007\000" +
    "\002\006\007\000\002\006\006\000\002\006\006\000\002" +
    "\006\005\000\002\006\007\000\002\006\007\000\002\006" +
    "\006\000\002\006\006\000\002\006\010\000\002\006\010" +
    "\000\002\006\011\000\002\006\011\000\002\004\003\000" +
    "\002\004\004\000\002\011\011\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\006\000\002\016\007\000\002\012\015\000\002\013\011" +
    "\000\002\014\013\000\002\015\011\000\002\017\012\000" +
    "\002\017\011\000\002\021\011\000\002\022\010\000\002" +
    "\022\011\000\002\020\006\000\002\020\010\000\002\020" +
    "\006\000\002\020\006\000\002\010\005\000\002\010\004" +
    "\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\053\005\001\002\000\004\002\273\001" +
    "\002\000\004\054\006\001\002\000\004\045\010\001\002" +
    "\000\006\011\016\041\015\001\002\000\004\046\011\001" +
    "\002\000\004\047\012\001\002\000\004\043\013\001\002" +
    "\000\006\011\uffff\041\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\033\266\001\002\000\004\041\017\001\002" +
    "\000\004\033\020\001\002\000\004\034\021\001\002\000" +
    "\004\035\022\001\002\000\024\006\031\010\033\011\036" +
    "\012\032\013\026\017\025\020\040\042\042\116\023\001" +
    "\002\000\004\033\244\001\002\000\032\006\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5\036" +
    "\ufff5\042\ufff5\061\ufff5\116\ufff5\001\002\000\004\033\236" +
    "\001\002\000\004\033\224\001\002\000\032\006\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\017\ufff2\020\ufff2" +
    "\036\ufff2\042\ufff2\061\ufff2\116\ufff2\001\002\000\032\006" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\017\ufffb" +
    "\020\ufffb\036\ufffb\042\ufffb\061\ufffb\116\ufffb\001\002\000" +
    "\004\007\221\001\002\000\004\044\202\001\002\000\006" +
    "\031\165\044\166\001\002\000\032\006\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\036\ufff7" +
    "\042\ufff7\061\ufff7\116\ufff7\001\002\000\032\006\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\017\ufff9\020\ufff9" +
    "\036\ufff9\042\ufff9\061\ufff9\116\ufff9\001\002\000\010\031" +
    "\145\044\144\131\147\001\002\000\030\006\031\010\033" +
    "\011\036\012\032\013\026\015\130\017\025\020\040\036" +
    "\143\042\042\116\023\001\002\000\004\033\054\001\002" +
    "\000\032\006\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\017\ufff1\020\ufff1\036\ufff1\042\ufff1\061\ufff1\116\ufff1" +
    "\001\002\000\004\052\044\001\002\000\032\006\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\015\uffee\017\uffee\020\uffee" +
    "\036\uffee\042\uffee\061\uffee\116\uffee\001\002\000\006\044" +
    "\046\051\045\001\002\000\006\043\050\052\051\001\002" +
    "\000\004\043\047\001\002\000\032\006\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\015\uffcd\017\uffcd\020\uffcd\036\uffcd" +
    "\042\uffcd\061\uffcd\116\uffcd\001\002\000\032\006\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb" +
    "\036\uffcb\042\uffcb\061\uffcb\116\uffcb\001\002\000\004\044" +
    "\052\001\002\000\004\043\053\001\002\000\032\006\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\017\uffcc\020" +
    "\uffcc\036\uffcc\042\uffcc\061\uffcc\116\uffcc\001\002\000\006" +
    "\010\056\044\057\001\002\000\004\034\115\001\002\000" +
    "\004\044\106\001\002\000\004\021\060\001\002\000\004" +
    "\050\061\001\002\000\004\043\062\001\002\000\006\032" +
    "\064\044\065\001\002\000\004\043\076\001\002\000\006" +
    "\034\uffdc\043\uffdc\001\002\000\004\027\066\001\002\000" +
    "\012\005\070\032\071\044\072\050\067\001\002\000\006" +
    "\034\uffda\043\uffda\001\002\000\006\005\073\044\074\001" +
    "\002\000\006\034\uffdb\043\uffdb\001\002\000\006\034\uffd9" +
    "\043\uffd9\001\002\000\006\034\uffd8\043\uffd8\001\002\000" +
    "\004\005\075\001\002\000\006\034\uffd7\043\uffd7\001\002" +
    "\000\006\031\100\044\101\001\002\000\004\034\uffd1\001" +
    "\002\000\004\044\105\001\002\000\006\030\102\031\103" +
    "\001\002\000\004\050\104\001\002\000\004\034\uffc8\001" +
    "\002\000\004\034\uffc9\001\002\000\004\034\uffc7\001\002" +
    "\000\004\021\107\001\002\000\004\050\110\001\002\000" +
    "\004\043\111\001\002\000\006\032\064\044\065\001\002" +
    "\000\004\043\113\001\002\000\006\031\100\044\101\001" +
    "\002\000\004\034\uffd2\001\002\000\004\035\116\001\002" +
    "\000\024\006\031\010\033\011\036\012\032\013\026\017" +
    "\025\020\040\042\042\116\023\001\002\000\030\006\031" +
    "\010\033\011\036\012\032\013\026\015\130\017\025\020" +
    "\040\036\124\042\042\116\023\001\002\000\032\006\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\017\ufff6\020" +
    "\ufff6\036\ufff6\042\ufff6\061\ufff6\116\ufff6\001\002\000\032" +
    "\006\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\017" +
    "\ufffc\020\ufffc\036\ufffc\042\ufffc\061\ufffc\116\ufffc\001\002" +
    "\000\032\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\036\ufff0\042\ufff0\061\ufff0\116\ufff0" +
    "\001\002\000\032\006\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\015\ufffa\017\ufffa\020\ufffa\036\ufffa\042\ufffa\061\ufffa" +
    "\116\ufffa\001\002\000\032\006\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\015\uffd3\017\uffd3\020\uffd3\036\uffd3\042\uffd3" +
    "\061\uffd3\116\uffd3\001\002\000\032\006\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\015\ufff8\017\ufff8\020\ufff8\036\ufff8" +
    "\042\ufff8\061\ufff8\116\ufff8\001\002\000\032\006\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\015\uffef\017\uffef\020\uffef" +
    "\036\uffef\042\uffef\061\uffef\116\uffef\001\002\000\004\015" +
    "\130\001\002\000\004\035\132\001\002\000\032\006\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020" +
    "\ufff3\036\ufff3\042\ufff3\061\ufff3\116\ufff3\001\002\000\024" +
    "\006\031\010\033\011\036\012\032\013\026\017\025\020" +
    "\040\042\042\116\023\001\002\000\030\006\031\010\033" +
    "\011\036\012\032\013\026\015\130\017\025\020\040\036" +
    "\134\042\042\116\023\001\002\000\004\017\135\001\002" +
    "\000\004\033\136\001\002\000\006\032\064\044\065\001" +
    "\002\000\004\034\140\001\002\000\004\043\141\001\002" +
    "\000\032\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015" +
    "\uffd4\017\uffd4\020\uffd4\036\uffd4\042\uffd4\061\uffd4\116\uffd4" +
    "\001\002\000\032\006\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\015\ufff4\017\ufff4\020\ufff4\036\ufff4\042\ufff4\061\ufff4" +
    "\116\ufff4\001\002\000\004\002\ufffe\001\002\000\012\021" +
    "\161\030\uffdf\031\160\043\uffdf\001\002\000\004\044\156" +
    "\001\002\000\006\030\152\043\153\001\002\000\006\044" +
    "\150\131\147\001\002\000\006\030\uffdf\043\uffdf\001\002" +
    "\000\006\030\uffde\043\uffde\001\002\000\004\050\154\001" +
    "\002\000\032\006\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\015\uffed\017\uffed\020\uffed\036\uffed\042\uffed\061\uffed\116" +
    "\uffed\001\002\000\004\043\155\001\002\000\032\006\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017\uffec\020" +
    "\uffec\036\uffec\042\uffec\061\uffec\116\uffec\001\002\000\004" +
    "\043\157\001\002\000\032\006\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\036\uffe9\042\uffe9" +
    "\061\uffe9\116\uffe9\001\002\000\004\043\164\001\002\000" +
    "\004\050\162\001\002\000\004\043\163\001\002\000\032" +
    "\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017" +
    "\uffeb\020\uffeb\036\uffeb\042\uffeb\061\uffeb\116\uffeb\001\002" +
    "\000\032\006\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015" +
    "\uffea\017\uffea\020\uffea\036\uffea\042\uffea\061\uffea\116\uffea" +
    "\001\002\000\004\044\200\001\002\000\012\021\172\030" +
    "\167\031\171\043\170\001\002\000\004\050\176\001\002" +
    "\000\032\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\036\uffe8\042\uffe8\061\uffe8\116\uffe8" +
    "\001\002\000\004\043\175\001\002\000\004\050\173\001" +
    "\002\000\004\043\174\001\002\000\032\006\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6\036" +
    "\uffe6\042\uffe6\061\uffe6\116\uffe6\001\002\000\032\006\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020" +
    "\uffe5\036\uffe5\042\uffe5\061\uffe5\116\uffe5\001\002\000\004" +
    "\043\177\001\002\000\032\006\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\015\uffe7\017\uffe7\020\uffe7\036\uffe7\042\uffe7" +
    "\061\uffe7\116\uffe7\001\002\000\004\043\201\001\002\000" +
    "\032\006\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4" +
    "\017\uffe4\020\uffe4\036\uffe4\042\uffe4\061\uffe4\116\uffe4\001" +
    "\002\000\006\021\204\030\203\001\002\000\004\005\213" +
    "\001\002\000\004\005\205\001\002\000\006\005\206\044" +
    "\207\001\002\000\004\043\212\001\002\000\004\005\210" +
    "\001\002\000\004\043\211\001\002\000\032\006\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\017\uffe0\020\uffe0" +
    "\036\uffe0\042\uffe0\061\uffe0\116\uffe0\001\002\000\032\006" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2" +
    "\020\uffe2\036\uffe2\042\uffe2\061\uffe2\116\uffe2\001\002\000" +
    "\006\005\214\044\215\001\002\000\004\043\220\001\002" +
    "\000\004\005\216\001\002\000\004\043\217\001\002\000" +
    "\032\006\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1" +
    "\017\uffe1\020\uffe1\036\uffe1\042\uffe1\061\uffe1\116\uffe1\001" +
    "\002\000\032\006\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\015\uffe3\017\uffe3\020\uffe3\036\uffe3\042\uffe3\061\uffe3\116" +
    "\uffe3\001\002\000\004\044\222\001\002\000\004\043\223" +
    "\001\002\000\032\006\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\015\uffca\017\uffca\020\uffca\036\uffca\042\uffca\061\uffca" +
    "\116\uffca\001\002\000\006\032\064\044\065\001\002\000" +
    "\004\034\226\001\002\000\004\035\227\001\002\000\024" +
    "\006\031\010\033\011\036\012\032\013\026\017\025\020" +
    "\040\042\042\116\023\001\002\000\030\006\031\010\033" +
    "\011\036\012\032\013\026\015\130\017\025\020\040\036" +
    "\231\042\042\116\023\001\002\000\034\006\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\232\015\uffdd\017\uffdd\020" +
    "\uffdd\036\uffdd\042\uffdd\061\uffdd\116\uffdd\001\002\000\004" +
    "\035\233\001\002\000\024\006\031\010\033\011\036\012" +
    "\032\013\026\017\025\020\040\042\042\116\023\001\002" +
    "\000\030\006\031\010\033\011\036\012\032\013\026\015" +
    "\130\017\025\020\040\036\235\042\042\116\023\001\002" +
    "\000\032\006\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015" +
    "\uffd6\017\uffd6\020\uffd6\036\uffd6\042\uffd6\061\uffd6\116\uffd6" +
    "\001\002\000\006\032\064\044\065\001\002\000\004\034" +
    "\240\001\002\000\004\035\241\001\002\000\024\006\031" +
    "\010\033\011\036\012\032\013\026\017\025\020\040\042" +
    "\042\116\023\001\002\000\030\006\031\010\033\011\036" +
    "\012\032\013\026\015\130\017\025\020\040\036\243\042" +
    "\042\116\023\001\002\000\032\006\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\015\uffd5\017\uffd5\020\uffd5\036\uffd5\042" +
    "\uffd5\061\uffd5\116\uffd5\001\002\000\004\044\245\001\002" +
    "\000\004\034\246\001\002\000\004\035\247\001\002\000" +
    "\004\056\250\001\002\000\004\050\261\001\002\000\006" +
    "\036\252\056\253\001\002\000\032\006\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0\036\uffd0" +
    "\042\uffd0\061\uffd0\116\uffd0\001\002\000\004\050\254\001" +
    "\002\000\004\016\255\001\002\000\024\006\031\010\033" +
    "\011\036\012\032\013\026\017\025\020\040\042\042\116" +
    "\023\001\002\000\030\006\031\010\033\011\036\012\032" +
    "\013\026\015\130\017\025\020\040\042\042\061\257\116" +
    "\023\001\002\000\004\043\260\001\002\000\006\036\uffce" +
    "\056\uffce\001\002\000\004\016\262\001\002\000\024\006" +
    "\031\010\033\011\036\012\032\013\026\017\025\020\040" +
    "\042\042\116\023\001\002\000\030\006\031\010\033\011" +
    "\036\012\032\013\026\015\130\017\025\020\040\042\042" +
    "\061\264\116\023\001\002\000\004\043\265\001\002\000" +
    "\006\036\uffcf\056\uffcf\001\002\000\004\034\267\001\002" +
    "\000\004\035\270\001\002\000\024\006\031\010\033\011" +
    "\036\012\032\013\026\017\025\020\040\042\042\116\023" +
    "\001\002\000\030\006\031\010\033\011\036\012\032\013" +
    "\026\015\130\017\025\020\040\036\272\042\042\116\023" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\006\001\001\000\004\003\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\036\006\027\011\034\012\033" +
    "\013\023\015\026\020\042\021\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\145\001\001\000\022\006\120\011" +
    "\122\012\124\013\117\014\126\015\130\020\125\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\111\001\001\000\002\001\001" +
    "\000\004\010\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\116\006\027\011\034\012\033\013\023" +
    "\015\026\020\042\021\040\001\001\000\022\006\120\011" +
    "\122\012\124\013\117\014\126\015\130\020\125\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\132\006\027\011\034" +
    "\012\033\013\023\015\026\020\042\021\040\001\001\000" +
    "\022\006\120\011\122\012\124\013\117\014\126\015\130" +
    "\020\125\021\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\227\006\027\011\034\012\033\013\023" +
    "\015\026\020\042\021\040\001\001\000\022\006\120\011" +
    "\122\012\124\013\117\014\126\015\130\020\125\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\233\006\027\011\034\012\033\013\023\015\026\020\042" +
    "\021\040\001\001\000\022\006\120\011\122\012\124\013" +
    "\117\014\126\015\130\020\125\021\121\001\001\000\002" +
    "\001\001\000\004\016\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\241\006\027\011\034\012\033" +
    "\013\023\015\026\020\042\021\040\001\001\000\022\006" +
    "\120\011\122\012\124\013\117\014\126\015\130\020\125" +
    "\021\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\255\006\027" +
    "\011\034\012\033\013\023\015\026\020\042\021\040\001" +
    "\001\000\022\006\120\011\122\012\124\013\117\014\126" +
    "\015\130\020\125\021\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\262\006\027" +
    "\011\034\012\033\013\023\015\026\020\042\021\040\001" +
    "\001\000\022\006\120\011\122\012\124\013\117\014\126" +
    "\015\130\020\125\021\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\270\006\027\011\034\012\033\013\023\015\026\020" +
    "\042\021\040\001\001\000\022\006\120\011\122\012\124" +
    "\013\117\014\126\015\130\020\125\021\121\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SALIDA_ENTRADA ::= Cin Doble_Mayor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SALIDA_ENTRADA ::= Cout Doble_Menor Palabra P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SALIDA_ENTRADA ::= Cout Doble_Menor Palabra Doble_Menor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SALIDA_ENTRADA ::= Cout Doble_Menor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_SWITCH ::= Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLE ::= Variables VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARIABLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int VARIABLE Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SALIDA_ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA SALIDA_ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESPACIOS_NOMBRE ::= Using NameSpace Espacio_de_Nombre P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIOS_NOMBRE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Include Libreria ESPACIOS_NOMBRE MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

