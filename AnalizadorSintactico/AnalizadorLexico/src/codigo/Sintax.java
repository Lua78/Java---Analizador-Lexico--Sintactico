
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 30 03:52:32 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 30 03:52:32 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\006\000\002\007" +
    "\006\000\002\003\011\000\002\003\010\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\005\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\006\005\000\002\006\007\000" +
    "\002\006\007\000\002\006\006\000\002\006\006\000\002" +
    "\006\005\000\002\006\007\000\002\006\007\000\002\006" +
    "\006\000\002\006\006\000\002\006\010\000\002\006\010" +
    "\000\002\006\011\000\002\006\011\000\002\004\003\000" +
    "\002\004\004\000\002\011\011\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\006\000\002\016\007\000\002\012\015\000\002\013\011" +
    "\000\002\014\013\000\002\015\011\000\002\017\012\000" +
    "\002\017\011\000\002\021\011\000\002\022\010\000\002" +
    "\022\011\000\002\020\006\000\002\010\005\000\002\010" +
    "\004\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\051\005\001\002\000\004\002\262\001" +
    "\002\000\004\052\006\001\002\000\004\043\010\001\002" +
    "\000\006\007\016\037\015\001\002\000\004\044\011\001" +
    "\002\000\004\045\012\001\002\000\004\041\013\001\002" +
    "\000\006\007\uffff\037\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\031\255\001\002\000\004\037\017\001\002" +
    "\000\004\031\020\001\002\000\004\032\021\001\002\000" +
    "\004\033\022\001\002\000\022\006\032\007\036\010\031" +
    "\011\026\015\025\016\040\040\042\114\023\001\002\000" +
    "\004\031\233\001\002\000\030\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\013\ufff5\015\ufff5\016\ufff5\034\ufff5\040\ufff5\057" +
    "\ufff5\114\ufff5\001\002\000\004\031\225\001\002\000\004" +
    "\031\213\001\002\000\030\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\013\ufff2\015\ufff2\016\ufff2\034\ufff2\040\ufff2\057\ufff2" +
    "\114\ufff2\001\002\000\030\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\013\ufffb\015\ufffb\016\ufffb\034\ufffb\040\ufffb\057\ufffb" +
    "\114\ufffb\001\002\000\004\042\174\001\002\000\006\027" +
    "\157\042\160\001\002\000\030\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\013\uffee\015\uffee\016\uffee\034\uffee\040\uffee\057" +
    "\uffee\114\uffee\001\002\000\030\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\013\ufff7\015\ufff7\016\ufff7\034\ufff7\040\ufff7\057" +
    "\ufff7\114\ufff7\001\002\000\030\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\013\ufff9\015\ufff9\016\ufff9\034\ufff9\040\ufff9\057" +
    "\ufff9\114\ufff9\001\002\000\010\027\137\042\136\127\141" +
    "\001\002\000\026\006\032\007\036\010\031\011\026\013" +
    "\122\015\025\016\040\034\135\040\042\114\023\001\002" +
    "\000\004\031\046\001\002\000\030\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\013\ufff1\015\ufff1\016\ufff1\034\ufff1\040\ufff1" +
    "\057\ufff1\114\ufff1\001\002\000\004\050\043\001\002\000" +
    "\004\047\044\001\002\000\004\041\045\001\002\000\030" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd\015\uffcd\016" +
    "\uffcd\034\uffcd\040\uffcd\057\uffcd\114\uffcd\001\002\000\006" +
    "\006\050\042\051\001\002\000\004\032\107\001\002\000" +
    "\004\042\100\001\002\000\004\017\052\001\002\000\004" +
    "\046\053\001\002\000\004\041\054\001\002\000\006\030" +
    "\056\042\057\001\002\000\004\041\070\001\002\000\006" +
    "\032\uffdc\041\uffdc\001\002\000\004\025\060\001\002\000" +
    "\012\005\062\030\063\042\064\046\061\001\002\000\006" +
    "\032\uffda\041\uffda\001\002\000\006\005\065\042\066\001" +
    "\002\000\006\032\uffdb\041\uffdb\001\002\000\006\032\uffd9" +
    "\041\uffd9\001\002\000\006\032\uffd8\041\uffd8\001\002\000" +
    "\004\005\067\001\002\000\006\032\uffd7\041\uffd7\001\002" +
    "\000\006\027\072\042\073\001\002\000\004\032\uffd1\001" +
    "\002\000\004\042\077\001\002\000\006\026\074\027\075" +
    "\001\002\000\004\046\076\001\002\000\004\032\uffcb\001" +
    "\002\000\004\032\uffcc\001\002\000\004\032\uffca\001\002" +
    "\000\004\017\101\001\002\000\004\046\102\001\002\000" +
    "\004\041\103\001\002\000\006\030\056\042\057\001\002" +
    "\000\004\041\105\001\002\000\006\027\072\042\073\001" +
    "\002\000\004\032\uffd2\001\002\000\004\033\110\001\002" +
    "\000\022\006\032\007\036\010\031\011\026\015\025\016" +
    "\040\040\042\114\023\001\002\000\026\006\032\007\036" +
    "\010\031\011\026\013\122\015\025\016\040\034\116\040" +
    "\042\114\023\001\002\000\030\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\013\ufff6\015\ufff6\016\ufff6\034\ufff6\040\ufff6\057" +
    "\ufff6\114\ufff6\001\002\000\030\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\013\ufffc\015\ufffc\016\ufffc\034\ufffc\040\ufffc\057" +
    "\ufffc\114\ufffc\001\002\000\030\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\013\ufff0\015\ufff0\016\ufff0\034\ufff0\040\ufff0\057" +
    "\ufff0\114\ufff0\001\002\000\030\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\013\ufffa\015\ufffa\016\ufffa\034\ufffa\040\ufffa\057" +
    "\ufffa\114\ufffa\001\002\000\030\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\013\uffd3\015\uffd3\016\uffd3\034\uffd3\040\uffd3\057" +
    "\uffd3\114\uffd3\001\002\000\030\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\013\ufff8\015\ufff8\016\ufff8\034\ufff8\040\ufff8\057" +
    "\ufff8\114\ufff8\001\002\000\004\013\122\001\002\000\030" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\015\uffef\016" +
    "\uffef\034\uffef\040\uffef\057\uffef\114\uffef\001\002\000\004" +
    "\033\124\001\002\000\030\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\034\ufff3\040\ufff3\057\ufff3" +
    "\114\ufff3\001\002\000\022\006\032\007\036\010\031\011" +
    "\026\015\025\016\040\040\042\114\023\001\002\000\026" +
    "\006\032\007\036\010\031\011\026\013\122\015\025\016" +
    "\040\034\126\040\042\114\023\001\002\000\004\015\127" +
    "\001\002\000\004\031\130\001\002\000\006\030\056\042" +
    "\057\001\002\000\004\032\132\001\002\000\004\041\133" +
    "\001\002\000\030\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013" +
    "\uffd4\015\uffd4\016\uffd4\034\uffd4\040\uffd4\057\uffd4\114\uffd4" +
    "\001\002\000\030\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013" +
    "\ufff4\015\ufff4\016\ufff4\034\ufff4\040\ufff4\057\ufff4\114\ufff4" +
    "\001\002\000\004\002\ufffe\001\002\000\012\017\153\026" +
    "\uffdf\027\152\041\uffdf\001\002\000\004\042\150\001\002" +
    "\000\006\026\144\041\145\001\002\000\006\042\142\127" +
    "\141\001\002\000\006\026\uffdf\041\uffdf\001\002\000\006" +
    "\026\uffde\041\uffde\001\002\000\004\046\146\001\002\000" +
    "\030\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\015\uffed" +
    "\016\uffed\034\uffed\040\uffed\057\uffed\114\uffed\001\002\000" +
    "\004\041\147\001\002\000\030\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\013\uffec\015\uffec\016\uffec\034\uffec\040\uffec\057" +
    "\uffec\114\uffec\001\002\000\004\041\151\001\002\000\030" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\015\uffe9\016" +
    "\uffe9\034\uffe9\040\uffe9\057\uffe9\114\uffe9\001\002\000\004" +
    "\041\156\001\002\000\004\046\154\001\002\000\004\041" +
    "\155\001\002\000\030\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\013\uffeb\015\uffeb\016\uffeb\034\uffeb\040\uffeb\057\uffeb\114" +
    "\uffeb\001\002\000\030\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\013\uffea\015\uffea\016\uffea\034\uffea\040\uffea\057\uffea\114" +
    "\uffea\001\002\000\004\042\172\001\002\000\012\017\164" +
    "\026\161\027\163\041\162\001\002\000\004\046\170\001" +
    "\002\000\030\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8" +
    "\015\uffe8\016\uffe8\034\uffe8\040\uffe8\057\uffe8\114\uffe8\001" +
    "\002\000\004\041\167\001\002\000\004\046\165\001\002" +
    "\000\004\041\166\001\002\000\030\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\015\uffe6\016\uffe6\034\uffe6\040\uffe6" +
    "\057\uffe6\114\uffe6\001\002\000\030\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\013\uffe5\015\uffe5\016\uffe5\034\uffe5\040\uffe5" +
    "\057\uffe5\114\uffe5\001\002\000\004\041\171\001\002\000" +
    "\030\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\015\uffe7" +
    "\016\uffe7\034\uffe7\040\uffe7\057\uffe7\114\uffe7\001\002\000" +
    "\004\041\173\001\002\000\030\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\013\uffe4\015\uffe4\016\uffe4\034\uffe4\040\uffe4\057" +
    "\uffe4\114\uffe4\001\002\000\006\017\176\026\175\001\002" +
    "\000\004\005\205\001\002\000\004\005\177\001\002\000" +
    "\006\005\200\042\201\001\002\000\004\041\204\001\002" +
    "\000\004\005\202\001\002\000\004\041\203\001\002\000" +
    "\030\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\015\uffe0" +
    "\016\uffe0\034\uffe0\040\uffe0\057\uffe0\114\uffe0\001\002\000" +
    "\030\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\015\uffe2" +
    "\016\uffe2\034\uffe2\040\uffe2\057\uffe2\114\uffe2\001\002\000" +
    "\006\005\206\042\207\001\002\000\004\041\212\001\002" +
    "\000\004\005\210\001\002\000\004\041\211\001\002\000" +
    "\030\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\015\uffe1" +
    "\016\uffe1\034\uffe1\040\uffe1\057\uffe1\114\uffe1\001\002\000" +
    "\030\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\015\uffe3" +
    "\016\uffe3\034\uffe3\040\uffe3\057\uffe3\114\uffe3\001\002\000" +
    "\006\030\056\042\057\001\002\000\004\032\215\001\002" +
    "\000\004\033\216\001\002\000\022\006\032\007\036\010" +
    "\031\011\026\015\025\016\040\040\042\114\023\001\002" +
    "\000\026\006\032\007\036\010\031\011\026\013\122\015" +
    "\025\016\040\034\220\040\042\114\023\001\002\000\032" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\221\013\uffdd\015" +
    "\uffdd\016\uffdd\034\uffdd\040\uffdd\057\uffdd\114\uffdd\001\002" +
    "\000\004\033\222\001\002\000\022\006\032\007\036\010" +
    "\031\011\026\015\025\016\040\040\042\114\023\001\002" +
    "\000\026\006\032\007\036\010\031\011\026\013\122\015" +
    "\025\016\040\034\224\040\042\114\023\001\002\000\030" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\015\uffd6\016" +
    "\uffd6\034\uffd6\040\uffd6\057\uffd6\114\uffd6\001\002\000\006" +
    "\030\056\042\057\001\002\000\004\032\227\001\002\000" +
    "\004\033\230\001\002\000\022\006\032\007\036\010\031" +
    "\011\026\015\025\016\040\040\042\114\023\001\002\000" +
    "\026\006\032\007\036\010\031\011\026\013\122\015\025" +
    "\016\040\034\232\040\042\114\023\001\002\000\030\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\015\uffd5\016\uffd5" +
    "\034\uffd5\040\uffd5\057\uffd5\114\uffd5\001\002\000\004\042" +
    "\234\001\002\000\004\032\235\001\002\000\004\033\236" +
    "\001\002\000\004\054\237\001\002\000\004\046\250\001" +
    "\002\000\006\034\241\054\242\001\002\000\030\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\013\uffd0\015\uffd0\016\uffd0\034" +
    "\uffd0\040\uffd0\057\uffd0\114\uffd0\001\002\000\004\046\243" +
    "\001\002\000\004\014\244\001\002\000\022\006\032\007" +
    "\036\010\031\011\026\015\025\016\040\040\042\114\023" +
    "\001\002\000\026\006\032\007\036\010\031\011\026\013" +
    "\122\015\025\016\040\040\042\057\246\114\023\001\002" +
    "\000\004\041\247\001\002\000\006\034\uffce\054\uffce\001" +
    "\002\000\004\014\251\001\002\000\022\006\032\007\036" +
    "\010\031\011\026\015\025\016\040\040\042\114\023\001" +
    "\002\000\026\006\032\007\036\010\031\011\026\013\122" +
    "\015\025\016\040\040\042\057\253\114\023\001\002\000" +
    "\004\041\254\001\002\000\006\034\uffcf\054\uffcf\001\002" +
    "\000\004\032\256\001\002\000\004\033\257\001\002\000" +
    "\022\006\032\007\036\010\031\011\026\015\025\016\040" +
    "\040\042\114\023\001\002\000\026\006\032\007\036\010" +
    "\031\011\026\013\122\015\025\016\040\034\261\040\042" +
    "\114\023\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\006\001\001\000\004\003\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\036\006\027\011\034\012\033" +
    "\013\023\015\026\020\032\021\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\137\001\001\000\022\006\112\011" +
    "\114\012\116\013\111\014\117\015\122\020\120\021\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\103\001\001\000\002" +
    "\001\001\000\004\010\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\110\006\027\011\034\012\033" +
    "\013\023\015\026\020\032\021\040\001\001\000\022\006" +
    "\112\011\114\012\116\013\111\014\117\015\122\020\120" +
    "\021\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\124\006\027" +
    "\011\034\012\033\013\023\015\026\020\032\021\040\001" +
    "\001\000\022\006\112\011\114\012\116\013\111\014\117" +
    "\015\122\020\120\021\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\216\006\027\011\034\012" +
    "\033\013\023\015\026\020\032\021\040\001\001\000\022" +
    "\006\112\011\114\012\116\013\111\014\117\015\122\020" +
    "\120\021\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\222\006\027\011\034\012\033\013\023\015" +
    "\026\020\032\021\040\001\001\000\022\006\112\011\114" +
    "\012\116\013\111\014\117\015\122\020\120\021\113\001" +
    "\001\000\002\001\001\000\004\016\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\230\006\027\011" +
    "\034\012\033\013\023\015\026\020\032\021\040\001\001" +
    "\000\022\006\112\011\114\012\116\013\111\014\117\015" +
    "\122\020\120\021\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\244\006\027\011\034\012\033\013\023\015\026\020\032" +
    "\021\040\001\001\000\022\006\112\011\114\012\116\013" +
    "\111\014\117\015\122\020\120\021\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\251\006\027\011\034\012\033\013\023\015\026\020\032" +
    "\021\040\001\001\000\022\006\112\011\114\012\116\013" +
    "\111\014\117\015\122\020\120\021\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\257\006\027\011\034\012\033\013\023" +
    "\015\026\020\032\021\040\001\001\000\022\006\112\011" +
    "\114\012\116\013\111\014\117\015\122\020\120\021\113" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SALIDA ::= Cout Doble_Menor Palabra P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_SWITCH ::= Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLE ::= Variables VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARIABLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int VARIABLE Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESPACIOS_NOMBRE ::= Using NameSpace Espacio_de_Nombre P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIOS_NOMBRE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Include Libreria ESPACIOS_NOMBRE MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

