
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 09 16:59:32 CEST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 09 16:59:32 CEST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\010\006\000\002\004\011\000\002\004\010" +
    "\000\002\006\004\000\002\006\003\000\002\006\004\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\005\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\007\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\006\000\002\007\006\000\002\007" +
    "\005\000\002\007\007\000\002\007\007\000\002\007\006" +
    "\000\002\007\006\000\002\007\010\000\002\007\010\000" +
    "\002\007\011\000\002\007\011\000\002\005\003\000\002" +
    "\005\004\000\002\005\006\000\002\012\011\000\002\020" +
    "\003\000\002\020\005\000\002\020\007\000\002\020\005" +
    "\000\002\020\005\000\002\020\006\000\002\020\007\000" +
    "\002\013\015\000\002\014\013\000\002\015\011\000\002" +
    "\016\011\000\002\021\012\000\002\021\011\000\002\023" +
    "\011\000\002\024\010\000\002\024\011\000\002\024\010" +
    "\000\002\024\011\000\002\022\006\000\002\022\010\000" +
    "\002\022\006\000\002\022\006\000\002\011\005\000\002" +
    "\011\004\000\002\011\004\000\002\003\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\004\053\005\001\002\000\004\002\363\001" +
    "\002\000\004\054\006\001\002\000\006\045\010\053\005" +
    "\001\002\000\006\011\017\041\016\001\002\000\004\046" +
    "\012\001\002\000\004\002\uffff\001\002\000\004\047\013" +
    "\001\002\000\004\043\014\001\002\000\006\011\ufffe\041" +
    "\ufffe\001\002\000\004\002\000\001\002\000\004\033\356" +
    "\001\002\000\004\041\020\001\002\000\004\033\021\001" +
    "\002\000\004\034\022\001\002\000\004\035\023\001\002" +
    "\000\026\006\036\010\035\011\033\012\041\013\042\017" +
    "\045\020\024\042\043\044\031\116\044\001\002\000\004" +
    "\033\323\001\002\000\034\006\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\036\ufff4\042\ufff4" +
    "\044\ufff4\061\ufff4\116\ufff4\001\002\000\032\006\036\010" +
    "\035\011\033\012\041\013\042\015\101\017\045\020\024" +
    "\036\322\042\043\044\031\116\044\001\002\000\034\006" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\017\ufffa" +
    "\020\ufffa\036\ufffa\042\ufffa\044\ufffa\061\ufffa\116\ufffa\001" +
    "\002\000\034\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\015\ufff0\017\ufff0\020\ufff0\036\ufff0\042\ufff0\044\ufff0\061" +
    "\ufff0\116\ufff0\001\002\000\004\021\254\001\002\000\034" +
    "\006\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\017" +
    "\ufff8\020\ufff8\036\ufff8\042\ufff8\044\ufff8\061\ufff8\116\ufff8" +
    "\001\002\000\010\031\237\044\172\131\174\001\002\000" +
    "\034\006\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6" +
    "\017\ufff6\020\ufff6\036\ufff6\042\ufff6\044\ufff6\061\ufff6\116" +
    "\ufff6\001\002\000\010\031\222\044\172\131\174\001\002" +
    "\000\004\007\217\001\002\000\034\006\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\015\uffed\017\uffed\020\uffed\036\uffed" +
    "\042\uffed\044\uffed\061\uffed\116\uffed\001\002\000\034\006" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017\uffec" +
    "\020\uffec\036\uffec\042\uffec\044\uffec\061\uffec\116\uffec\001" +
    "\002\000\006\044\172\131\174\001\002\000\004\033\160" +
    "\001\002\000\004\052\150\001\002\000\004\033\114\001" +
    "\002\000\004\033\047\001\002\000\034\006\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1\036" +
    "\ufff1\042\ufff1\044\ufff1\061\ufff1\116\ufff1\001\002\000\006" +
    "\032\051\044\052\001\002\000\004\034\065\001\002\000" +
    "\006\034\uffd8\043\uffd8\001\002\000\004\027\053\001\002" +
    "\000\012\005\055\032\056\044\057\050\054\001\002\000" +
    "\010\026\063\034\uffd5\043\uffd5\001\002\000\006\005\060" +
    "\044\061\001\002\000\006\034\uffd7\043\uffd7\001\002\000" +
    "\006\034\uffd4\043\uffd4\001\002\000\006\034\uffd3\043\uffd3" +
    "\001\002\000\004\005\062\001\002\000\006\034\uffd2\043" +
    "\uffd2\001\002\000\006\032\051\044\052\001\002\000\006" +
    "\034\uffd6\043\uffd6\001\002\000\004\035\066\001\002\000" +
    "\026\006\036\010\035\011\033\012\041\013\042\017\045" +
    "\020\024\042\043\044\031\116\044\001\002\000\032\006" +
    "\036\010\035\011\033\012\041\013\042\015\101\017\045" +
    "\020\024\036\074\042\043\044\031\116\044\001\002\000" +
    "\034\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5" +
    "\017\ufff5\020\ufff5\036\ufff5\042\ufff5\044\ufff5\061\ufff5\116" +
    "\ufff5\001\002\000\034\006\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\015\ufffb\017\ufffb\020\ufffb\036\ufffb\042\ufffb\044" +
    "\ufffb\061\ufffb\116\ufffb\001\002\000\034\006\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\015\uffef\017\uffef\020\uffef\036" +
    "\uffef\042\uffef\044\uffef\061\uffef\116\uffef\001\002\000\034" +
    "\006\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\017" +
    "\ufff9\020\ufff9\036\ufff9\042\ufff9\044\ufff9\061\ufff9\116\ufff9" +
    "\001\002\000\034\006\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\015\uffcf\017\uffcf\020\uffcf\036\uffcf\042\uffcf\044\uffcf" +
    "\061\uffcf\116\uffcf\001\002\000\034\006\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\036\ufff7" +
    "\042\ufff7\044\ufff7\061\ufff7\116\ufff7\001\002\000\034\006" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\017\uffee" +
    "\020\uffee\036\uffee\042\uffee\044\uffee\061\uffee\116\uffee\001" +
    "\002\000\034\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\036\uffeb\042\uffeb\044\uffeb\061" +
    "\uffeb\116\uffeb\001\002\000\004\015\101\001\002\000\004" +
    "\035\103\001\002\000\034\006\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\015\ufff2\017\ufff2\020\ufff2\036\ufff2\042\ufff2" +
    "\044\ufff2\061\ufff2\116\ufff2\001\002\000\026\006\036\010" +
    "\035\011\033\012\041\013\042\017\045\020\024\042\043" +
    "\044\031\116\044\001\002\000\032\006\036\010\035\011" +
    "\033\012\041\013\042\015\101\017\045\020\024\036\105" +
    "\042\043\044\031\116\044\001\002\000\004\017\106\001" +
    "\002\000\004\033\107\001\002\000\006\032\051\044\052" +
    "\001\002\000\004\034\111\001\002\000\004\043\112\001" +
    "\002\000\034\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\015\uffd0\017\uffd0\020\uffd0\036\uffd0\042\uffd0\044\uffd0\061" +
    "\uffd0\116\uffd0\001\002\000\034\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\036\ufff3\042" +
    "\ufff3\044\ufff3\061\ufff3\116\ufff3\001\002\000\004\044\115" +
    "\001\002\000\004\034\116\001\002\000\004\035\117\001" +
    "\002\000\004\056\120\001\002\000\006\044\137\050\136" +
    "\001\002\000\006\036\122\056\123\001\002\000\034\006" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\036\uffcb\042\uffcb\044\uffcb\061\uffcb\116\uffcb\001" +
    "\002\000\006\044\125\050\124\001\002\000\004\016\132" +
    "\001\002\000\004\016\126\001\002\000\026\006\036\010" +
    "\035\011\033\012\041\013\042\017\045\020\024\042\043" +
    "\044\031\116\044\001\002\000\032\006\036\010\035\011" +
    "\033\012\041\013\042\015\101\017\045\020\024\042\043" +
    "\044\031\061\130\116\044\001\002\000\004\043\131\001" +
    "\002\000\006\036\uffc7\056\uffc7\001\002\000\026\006\036" +
    "\010\035\011\033\012\041\013\042\017\045\020\024\042" +
    "\043\044\031\116\044\001\002\000\032\006\036\010\035" +
    "\011\033\012\041\013\042\015\101\017\045\020\024\042" +
    "\043\044\031\061\134\116\044\001\002\000\004\043\135" +
    "\001\002\000\006\036\uffc9\056\uffc9\001\002\000\004\016" +
    "\144\001\002\000\004\016\140\001\002\000\026\006\036" +
    "\010\035\011\033\012\041\013\042\017\045\020\024\042" +
    "\043\044\031\116\044\001\002\000\032\006\036\010\035" +
    "\011\033\012\041\013\042\015\101\017\045\020\024\042" +
    "\043\044\031\061\142\116\044\001\002\000\004\043\143" +
    "\001\002\000\006\036\uffc8\056\uffc8\001\002\000\026\006" +
    "\036\010\035\011\033\012\041\013\042\017\045\020\024" +
    "\042\043\044\031\116\044\001\002\000\032\006\036\010" +
    "\035\011\033\012\041\013\042\015\101\017\045\020\024" +
    "\042\043\044\031\061\146\116\044\001\002\000\004\043" +
    "\147\001\002\000\006\036\uffca\056\uffca\001\002\000\006" +
    "\044\152\051\151\001\002\000\006\043\154\052\155\001" +
    "\002\000\004\043\153\001\002\000\034\006\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\015\uffc6\017\uffc6\020\uffc6\036" +
    "\uffc6\042\uffc6\044\uffc6\061\uffc6\116\uffc6\001\002\000\034" +
    "\006\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\017" +
    "\uffc4\020\uffc4\036\uffc4\042\uffc4\044\uffc4\061\uffc4\116\uffc4" +
    "\001\002\000\004\044\156\001\002\000\004\043\157\001" +
    "\002\000\034\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\015\uffc5\017\uffc5\020\uffc5\036\uffc5\042\uffc5\044\uffc5\061" +
    "\uffc5\116\uffc5\001\002\000\006\032\051\044\052\001\002" +
    "\000\004\034\162\001\002\000\004\035\163\001\002\000" +
    "\026\006\036\010\035\011\033\012\041\013\042\017\045" +
    "\020\024\042\043\044\031\116\044\001\002\000\032\006" +
    "\036\010\035\011\033\012\041\013\042\015\101\017\045" +
    "\020\024\036\165\042\043\044\031\116\044\001\002\000" +
    "\036\006\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\166" +
    "\015\uffd9\017\uffd9\020\uffd9\036\uffd9\042\uffd9\044\uffd9\061" +
    "\uffd9\116\uffd9\001\002\000\004\035\167\001\002\000\026" +
    "\006\036\010\035\011\033\012\041\013\042\017\045\020" +
    "\024\042\043\044\031\116\044\001\002\000\032\006\036" +
    "\010\035\011\033\012\041\013\042\015\101\017\045\020" +
    "\024\036\171\042\043\044\031\116\044\001\002\000\034" +
    "\006\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\017" +
    "\uffd1\020\uffd1\036\uffd1\042\uffd1\044\uffd1\061\uffd1\116\uffd1" +
    "\001\002\000\014\021\uffdc\030\uffdc\031\uffdc\037\214\043" +
    "\uffdc\001\002\000\006\021\177\030\176\001\002\000\006" +
    "\044\172\131\174\001\002\000\012\021\uffdb\030\uffdb\031" +
    "\uffdb\043\uffdb\001\002\000\004\005\206\001\002\000\004" +
    "\005\200\001\002\000\006\005\201\044\202\001\002\000" +
    "\004\043\205\001\002\000\004\005\203\001\002\000\004" +
    "\043\204\001\002\000\034\006\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\036\uffdd\042\uffdd" +
    "\044\uffdd\061\uffdd\116\uffdd\001\002\000\034\006\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf" +
    "\036\uffdf\042\uffdf\044\uffdf\061\uffdf\116\uffdf\001\002\000" +
    "\006\005\207\044\210\001\002\000\004\043\213\001\002" +
    "\000\004\005\211\001\002\000\004\043\212\001\002\000" +
    "\034\006\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015\uffde" +
    "\017\uffde\020\uffde\036\uffde\042\uffde\044\uffde\061\uffde\116" +
    "\uffde\001\002\000\034\006\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\015\uffe0\017\uffe0\020\uffe0\036\uffe0\042\uffe0\044" +
    "\uffe0\061\uffe0\116\uffe0\001\002\000\004\050\215\001\002" +
    "\000\004\040\216\001\002\000\012\021\uffda\030\uffda\031" +
    "\uffda\043\uffda\001\002\000\004\044\220\001\002\000\004" +
    "\043\221\001\002\000\034\006\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\015\uffc3\017\uffc3\020\uffc3\036\uffc3\042\uffc3" +
    "\044\uffc3\061\uffc3\116\uffc3\001\002\000\006\044\172\131" +
    "\174\001\002\000\012\021\227\030\224\031\226\043\225" +
    "\001\002\000\004\050\233\001\002\000\034\006\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5" +
    "\036\uffe5\042\uffe5\044\uffe5\061\uffe5\116\uffe5\001\002\000" +
    "\004\043\232\001\002\000\004\050\230\001\002\000\004" +
    "\043\231\001\002\000\034\006\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3\036\uffe3\042\uffe3" +
    "\044\uffe3\061\uffe3\116\uffe3\001\002\000\034\006\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\020\uffe2" +
    "\036\uffe2\042\uffe2\044\uffe2\061\uffe2\116\uffe2\001\002\000" +
    "\004\043\234\001\002\000\034\006\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\036\uffe4\042" +
    "\uffe4\044\uffe4\061\uffe4\116\uffe4\001\002\000\004\043\236" +
    "\001\002\000\034\006\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\015\uffe1\017\uffe1\020\uffe1\036\uffe1\042\uffe1\044\uffe1" +
    "\061\uffe1\116\uffe1\001\002\000\006\044\172\131\174\001" +
    "\002\000\012\021\244\030\241\031\243\043\242\001\002" +
    "\000\004\050\250\001\002\000\034\006\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\015\uffea\017\uffea\020\uffea\036\uffea" +
    "\042\uffea\044\uffea\061\uffea\116\uffea\001\002\000\004\043" +
    "\247\001\002\000\004\050\245\001\002\000\004\043\246" +
    "\001\002\000\034\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\036\uffe8\042\uffe8\044\uffe8" +
    "\061\uffe8\116\uffe8\001\002\000\034\006\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\015\uffe7\017\uffe7\020\uffe7\036\uffe7" +
    "\042\uffe7\044\uffe7\061\uffe7\116\uffe7\001\002\000\004\043" +
    "\251\001\002\000\034\006\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\015\uffe9\017\uffe9\020\uffe9\036\uffe9\042\uffe9\044" +
    "\uffe9\061\uffe9\116\uffe9\001\002\000\004\043\253\001\002" +
    "\000\034\006\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\036\uffe6\042\uffe6\044\uffe6\061\uffe6" +
    "\116\uffe6\001\002\000\006\044\257\050\255\001\002\000" +
    "\014\022\310\023\307\024\311\025\305\043\306\001\002" +
    "\000\034\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\017\uffbf\020\uffbf\036\uffbf\042\uffbf\044\uffbf\061\uffbf" +
    "\116\uffbf\001\002\000\014\022\263\023\262\024\264\025" +
    "\260\043\261\001\002\000\006\044\302\050\301\001\002" +
    "\000\034\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\036\uffbd\042\uffbd\044\uffbd\061\uffbd" +
    "\116\uffbd\001\002\000\006\044\276\050\275\001\002\000" +
    "\006\044\272\050\271\001\002\000\006\044\266\050\265" +
    "\001\002\000\004\043\270\001\002\000\004\043\267\001" +
    "\002\000\034\006\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\015\uffb6\017\uffb6\020\uffb6\036\uffb6\042\uffb6\044\uffb6\061" +
    "\uffb6\116\uffb6\001\002\000\034\006\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\015\uffb4\017\uffb4\020\uffb4\036\uffb4\042" +
    "\uffb4\044\uffb4\061\uffb4\116\uffb4\001\002\000\004\043\274" +
    "\001\002\000\004\043\273\001\002\000\034\006\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\017\uffbc\020\uffbc" +
    "\036\uffbc\042\uffbc\044\uffbc\061\uffbc\116\uffbc\001\002\000" +
    "\034\006\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba" +
    "\017\uffba\020\uffba\036\uffba\042\uffba\044\uffba\061\uffba\116" +
    "\uffba\001\002\000\004\043\300\001\002\000\004\043\277" +
    "\001\002\000\034\006\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\017\uffb9\020\uffb9\036\uffb9\042\uffb9\044\uffb9" +
    "\061\uffb9\116\uffb9\001\002\000\034\006\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\015\uffb7\017\uffb7\020\uffb7\036\uffb7" +
    "\042\uffb7\044\uffb7\061\uffb7\116\uffb7\001\002\000\004\043" +
    "\304\001\002\000\004\043\303\001\002\000\034\006\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3\017\uffb3\020" +
    "\uffb3\036\uffb3\042\uffb3\044\uffb3\061\uffb3\116\uffb3\001\002" +
    "\000\034\006\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015" +
    "\uffb1\017\uffb1\020\uffb1\036\uffb1\042\uffb1\044\uffb1\061\uffb1" +
    "\116\uffb1\001\002\000\004\044\320\001\002\000\034\006" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\017\uffbe" +
    "\020\uffbe\036\uffbe\042\uffbe\044\uffbe\061\uffbe\116\uffbe\001" +
    "\002\000\004\044\316\001\002\000\004\044\314\001\002" +
    "\000\004\044\312\001\002\000\004\043\313\001\002\000" +
    "\034\006\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5" +
    "\017\uffb5\020\uffb5\036\uffb5\042\uffb5\044\uffb5\061\uffb5\116" +
    "\uffb5\001\002\000\004\043\315\001\002\000\034\006\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb\017\uffbb\020" +
    "\uffbb\036\uffbb\042\uffbb\044\uffbb\061\uffbb\116\uffbb\001\002" +
    "\000\004\043\317\001\002\000\034\006\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\015\uffb8\017\uffb8\020\uffb8\036\uffb8" +
    "\042\uffb8\044\uffb8\061\uffb8\116\uffb8\001\002\000\004\043" +
    "\321\001\002\000\034\006\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\015\uffb2\017\uffb2\020\uffb2\036\uffb2\042\uffb2\044" +
    "\uffb2\061\uffb2\116\uffb2\001\002\000\004\002\ufffd\001\002" +
    "\000\006\010\326\044\325\001\002\000\004\034\352\001" +
    "\002\000\004\021\344\001\002\000\004\044\327\001\002" +
    "\000\004\021\330\001\002\000\004\050\331\001\002\000" +
    "\004\043\332\001\002\000\006\032\051\044\052\001\002" +
    "\000\004\043\334\001\002\000\006\031\336\044\337\001" +
    "\002\000\004\034\uffcd\001\002\000\004\044\343\001\002" +
    "\000\006\030\340\031\341\001\002\000\004\050\342\001" +
    "\002\000\004\034\uffc1\001\002\000\004\034\uffc2\001\002" +
    "\000\004\034\uffc0\001\002\000\004\050\345\001\002\000" +
    "\004\043\346\001\002\000\006\032\051\044\052\001\002" +
    "\000\004\043\350\001\002\000\006\031\336\044\337\001" +
    "\002\000\004\034\uffcc\001\002\000\004\035\353\001\002" +
    "\000\026\006\036\010\035\011\033\012\041\013\042\017" +
    "\045\020\024\042\043\044\031\116\044\001\002\000\032" +
    "\006\036\010\035\011\033\012\041\013\042\015\101\017" +
    "\045\020\024\036\355\042\043\044\031\116\044\001\002" +
    "\000\034\006\uffce\010\uffce\011\uffce\012\uffce\013\uffce\015" +
    "\uffce\017\uffce\020\uffce\036\uffce\042\uffce\044\uffce\061\uffce" +
    "\116\uffce\001\002\000\004\034\357\001\002\000\004\035" +
    "\360\001\002\000\026\006\036\010\035\011\033\012\041" +
    "\013\042\017\045\020\024\042\043\044\031\116\044\001" +
    "\002\000\032\006\036\010\035\011\033\012\041\013\042" +
    "\015\101\017\045\020\024\036\362\042\043\044\031\116" +
    "\044\001\002\000\004\002\ufffc\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\010\010\006\001\001\000\004" +
    "\004\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\037" +
    "\006\025\007\026\012\031\013\033\015\024\016\045\022" +
    "\036\023\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\076\007\070\012\072\013\074\014\077\015" +
    "\067\016\101\022\075\023\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\237\001\001\000\002\001\001\000\004\005\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\037\006\066\007\026\012\031\013\033\015" +
    "\024\016\045\022\036\023\027\001\001\000\024\003\076" +
    "\007\070\012\072\013\074\014\077\015\067\016\101\022" +
    "\075\023\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\037\006\103\007\026\012\031\013\033\015\024" +
    "\016\045\022\036\023\027\001\001\000\024\003\076\007" +
    "\070\012\072\013\074\014\077\015\067\016\101\022\075" +
    "\023\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\037\006\126\007\026\012\031\013\033\015\024\016" +
    "\045\022\036\023\027\001\001\000\024\003\076\007\070" +
    "\012\072\013\074\014\077\015\067\016\101\022\075\023" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\037\006\132\007\026\012\031\013\033\015\024\016" +
    "\045\022\036\023\027\001\001\000\024\003\076\007\070" +
    "\012\072\013\074\014\077\015\067\016\101\022\075\023" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\037\006\140\007" +
    "\026\012\031\013\033\015\024\016\045\022\036\023\027" +
    "\001\001\000\024\003\076\007\070\012\072\013\074\014" +
    "\077\015\067\016\101\022\075\023\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\037\006\144\007" +
    "\026\012\031\013\033\015\024\016\045\022\036\023\027" +
    "\001\001\000\024\003\076\007\070\012\072\013\074\014" +
    "\077\015\067\016\101\022\075\023\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\037\006\163\007\026\012\031\013\033\015" +
    "\024\016\045\022\036\023\027\001\001\000\024\003\076" +
    "\007\070\012\072\013\074\014\077\015\067\016\101\022" +
    "\075\023\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\037\006\167\007\026\012\031\013\033\015" +
    "\024\016\045\022\036\023\027\001\001\000\024\003\076" +
    "\007\070\012\072\013\074\014\077\015\067\016\101\022" +
    "\075\023\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\332\001\001\000\002\001\001\000\004\011" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\346\001\001\000\002\001\001\000\004\011" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\037\006\353\007\026\012\031\013\033\015\024\016" +
    "\045\022\036\023\027\001\001\000\024\003\076\007\070" +
    "\012\072\013\074\014\077\015\067\016\101\022\075\023" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\037\006\360\007\026\012\031\013" +
    "\033\015\024\016\045\022\036\023\027\001\001\000\024" +
    "\003\076\007\070\012\072\013\074\014\077\015\067\016" +
    "\101\022\075\023\071\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION ::= Identificador Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION ::= Numero Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION ::= Identificador Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION ::= Identificador Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION ::= Numero Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION ::= Identificador Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION ::= Identificador Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION ::= Numero Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACION ::= Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION ::= Identificador Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION ::= Numero Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION ::= Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION ::= Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION ::= Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= Identificador Igual OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SALIDA_ENTRADA ::= Cin Doble_Mayor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SALIDA_ENTRADA ::= Cout Doble_Menor Palabra P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SALIDA_ENTRADA ::= Cout Doble_Menor Palabra Doble_Menor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SALIDA_ENTRADA ::= Cout Doble_Menor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Identificador Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_SWITCH ::= Case Identificador Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_SWITCH ::= Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero Op_logico SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARIABLE ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARIABLE ::= Variables VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARIABLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Cadena VARIABLE Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena VARIABLE Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena VARIABLE Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena VARIABLE Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T_dato Op_incremento VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= T_dato VARIABLE Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato VARIABLE Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato VARIABLE Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int Op_incremento VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int VARIABLE Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int VARIABLE Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int VARIABLE Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SALIDA_ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA SALIDA_ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESPACIOS_NOMBRE ::= Using NameSpace Espacio_de_Nombre P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIOS_NOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Include Libreria INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Include Libreria ESPACIOS_NOMBRE MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

