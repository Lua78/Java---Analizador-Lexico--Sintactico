
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 20 21:37:08 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 20 21:37:08 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\006\000\002\006" +
    "\006\000\002\003\011\000\002\003\010\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\005" +
    "\000\002\005\007\000\002\005\007\000\002\005\006\000" +
    "\002\005\006\000\002\005\005\000\002\005\007\000\002" +
    "\005\007\000\002\005\006\000\002\005\006\000\002\005" +
    "\010\000\002\005\010\000\002\005\011\000\002\005\011" +
    "\000\002\010\011\000\002\015\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\006\000\002" +
    "\015\007\000\002\011\015\000\002\012\011\000\002\013" +
    "\013\000\002\014\011\000\002\016\012\000\002\016\011" +
    "\000\002\017\006\000\002\007\005\000\002\007\004\000" +
    "\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\050\005\001\002\000\004\002\231\001" +
    "\002\000\004\051\006\001\002\000\004\042\010\001\002" +
    "\000\006\007\016\036\015\001\002\000\004\043\011\001" +
    "\002\000\004\044\012\001\002\000\004\040\013\001\002" +
    "\000\006\007\uffff\036\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\030\224\001\002\000\004\036\017\001\002" +
    "\000\004\030\020\001\002\000\004\031\021\001\002\000" +
    "\004\032\022\001\002\000\020\006\031\007\035\010\030" +
    "\011\024\014\026\015\037\037\040\001\002\000\024\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\033\ufff5\037\ufff5\001\002\000\004\030\212\001\002\000" +
    "\024\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\033\ufff2\037\ufff2\001\002\000\004\030\204\001" +
    "\002\000\024\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\033\ufffb\037\ufffb\001\002\000\004\041" +
    "\165\001\002\000\006\026\151\041\150\001\002\000\024" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\033\ufff0\037\ufff0\001\002\000\024\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\013\ufff7\014\ufff7\015\ufff7\033\ufff7\037" +
    "\ufff7\001\002\000\024\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\033\ufff9\037\ufff9\001\002\000" +
    "\006\026\133\041\134\001\002\000\024\006\031\007\035" +
    "\010\030\011\024\013\115\014\026\015\037\033\132\037" +
    "\040\001\002\000\004\030\044\001\002\000\004\047\041" +
    "\001\002\000\004\046\042\001\002\000\004\040\043\001" +
    "\002\000\024\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\033\uffd4\037\uffd4\001\002\000\006\006" +
    "\047\041\046\001\002\000\004\031\105\001\002\000\004" +
    "\016\077\001\002\000\004\041\050\001\002\000\004\016" +
    "\051\001\002\000\004\045\052\001\002\000\004\040\053" +
    "\001\002\000\006\027\055\041\056\001\002\000\004\040" +
    "\067\001\002\000\006\031\uffe0\040\uffe0\001\002\000\004" +
    "\024\057\001\002\000\012\005\061\027\062\041\063\045" +
    "\060\001\002\000\006\031\uffde\040\uffde\001\002\000\006" +
    "\005\064\041\065\001\002\000\006\031\uffdf\040\uffdf\001" +
    "\002\000\006\031\uffdd\040\uffdd\001\002\000\006\031\uffdc" +
    "\040\uffdc\001\002\000\004\005\066\001\002\000\006\031" +
    "\uffdb\040\uffdb\001\002\000\006\026\071\041\072\001\002" +
    "\000\004\031\uffd6\001\002\000\004\041\076\001\002\000" +
    "\006\025\073\026\074\001\002\000\004\045\075\001\002" +
    "\000\004\031\uffd2\001\002\000\004\031\uffd3\001\002\000" +
    "\004\031\uffd1\001\002\000\004\045\100\001\002\000\004" +
    "\040\101\001\002\000\006\027\055\041\056\001\002\000" +
    "\004\040\103\001\002\000\006\026\071\041\072\001\002" +
    "\000\004\031\uffd5\001\002\000\004\032\106\001\002\000" +
    "\020\006\031\007\035\010\030\011\024\014\026\015\037" +
    "\037\040\001\002\000\024\006\031\007\035\010\030\011" +
    "\024\013\115\014\026\015\037\033\117\037\040\001\002" +
    "\000\024\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\033\ufff6\037\ufff6\001\002\000\024\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\033" +
    "\ufff3\037\ufff3\001\002\000\024\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\013\ufffc\014\ufffc\015\ufffc\033\ufffc\037\ufffc\001" +
    "\002\000\024\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\033\ufff1\037\ufff1\001\002\000\024\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\033\ufff8\037\ufff8\001\002\000\004\032\122\001\002\000" +
    "\024\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\033\ufffa\037\ufffa\001\002\000\024\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\033\uffd7" +
    "\037\uffd7\001\002\000\004\013\115\001\002\000\024\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\033\ufff4\037\ufff4\001\002\000\020\006\031\007\035\010" +
    "\030\011\024\014\026\015\037\037\040\001\002\000\024" +
    "\006\031\007\035\010\030\011\024\013\115\014\026\015" +
    "\037\033\124\037\040\001\002\000\004\014\125\001\002" +
    "\000\004\030\126\001\002\000\006\027\055\041\056\001" +
    "\002\000\004\031\130\001\002\000\004\040\131\001\002" +
    "\000\024\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\033\uffd8\037\uffd8\001\002\000\004\002\ufffe" +
    "\001\002\000\004\041\146\001\002\000\012\016\140\025" +
    "\135\026\137\040\136\001\002\000\004\045\144\001\002" +
    "\000\024\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\014" +
    "\uffef\015\uffef\033\uffef\037\uffef\001\002\000\004\040\143" +
    "\001\002\000\004\045\141\001\002\000\004\040\142\001" +
    "\002\000\024\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed" +
    "\014\uffed\015\uffed\033\uffed\037\uffed\001\002\000\024\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec\015\uffec" +
    "\033\uffec\037\uffec\001\002\000\004\040\145\001\002\000" +
    "\024\006\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014\uffee" +
    "\015\uffee\033\uffee\037\uffee\001\002\000\004\040\147\001" +
    "\002\000\024\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\033\uffeb\037\uffeb\001\002\000\012\016" +
    "\157\025\154\026\156\040\155\001\002\000\004\041\152" +
    "\001\002\000\004\040\153\001\002\000\024\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\033\uffe6" +
    "\037\uffe6\001\002\000\004\045\163\001\002\000\024\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea\015\uffea" +
    "\033\uffea\037\uffea\001\002\000\004\040\162\001\002\000" +
    "\004\045\160\001\002\000\004\040\161\001\002\000\024" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\033\uffe8\037\uffe8\001\002\000\024\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\033\uffe7\037" +
    "\uffe7\001\002\000\004\040\164\001\002\000\024\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\033" +
    "\uffe9\037\uffe9\001\002\000\006\016\167\025\166\001\002" +
    "\000\004\005\176\001\002\000\004\005\170\001\002\000" +
    "\006\005\171\041\172\001\002\000\004\040\175\001\002" +
    "\000\004\005\173\001\002\000\004\040\174\001\002\000" +
    "\024\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\033\uffe2\037\uffe2\001\002\000\024\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\033\uffe4" +
    "\037\uffe4\001\002\000\006\005\177\041\200\001\002\000" +
    "\004\040\203\001\002\000\004\005\201\001\002\000\004" +
    "\040\202\001\002\000\024\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\033\uffe3\037\uffe3\001\002" +
    "\000\024\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\033\uffe5\037\uffe5\001\002\000\006\027\055" +
    "\041\056\001\002\000\004\031\206\001\002\000\004\032" +
    "\207\001\002\000\020\006\031\007\035\010\030\011\024" +
    "\014\026\015\037\037\040\001\002\000\024\006\031\007" +
    "\035\010\030\011\024\013\115\014\026\015\037\033\211" +
    "\037\040\001\002\000\024\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\033\uffd9\037\uffd9\001\002" +
    "\000\006\027\055\041\056\001\002\000\004\031\214\001" +
    "\002\000\004\032\215\001\002\000\020\006\031\007\035" +
    "\010\030\011\024\014\026\015\037\037\040\001\002\000" +
    "\024\006\031\007\035\010\030\011\024\013\115\014\026" +
    "\015\037\033\217\037\040\001\002\000\026\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\220\013\uffe1\014\uffe1\015\uffe1" +
    "\033\uffe1\037\uffe1\001\002\000\004\032\221\001\002\000" +
    "\020\006\031\007\035\010\030\011\024\014\026\015\037" +
    "\037\040\001\002\000\024\006\031\007\035\010\030\011" +
    "\024\013\115\014\026\015\037\033\223\037\040\001\002" +
    "\000\024\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014" +
    "\uffda\015\uffda\033\uffda\037\uffda\001\002\000\004\031\225" +
    "\001\002\000\004\032\226\001\002\000\020\006\031\007" +
    "\035\010\030\011\024\014\026\015\037\037\040\001\002" +
    "\000\024\006\031\007\035\010\030\011\024\013\115\014" +
    "\026\015\037\033\230\037\040\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\006\001\001\000\004\003\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\035\005\026\010\033\011\032" +
    "\012\022\014\024\017\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\111\010\115\011\113\012\107\013\117\014" +
    "\110\017\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\101\001\001\000\002\001" +
    "\001\000\004\007\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\106\005\026\010\033\011\032\012" +
    "\022\014\024\017\031\001\001\000\020\005\111\010\115" +
    "\011\113\012\107\013\117\014\110\017\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\120\001\001\000\002" +
    "\001\001\000\020\004\122\005\026\010\033\011\032\012" +
    "\022\014\024\017\031\001\001\000\020\005\111\010\115" +
    "\011\113\012\107\013\117\014\110\017\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\207\005\026\010\033\011\032\012\022\014\024" +
    "\017\031\001\001\000\020\005\111\010\115\011\113\012" +
    "\107\013\117\014\110\017\112\001\001\000\002\001\001" +
    "\000\004\015\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\215\005\026\010\033\011\032\012\022" +
    "\014\024\017\031\001\001\000\020\005\111\010\115\011" +
    "\113\012\107\013\117\014\110\017\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\221\005\026\010" +
    "\033\011\032\012\022\014\024\017\031\001\001\000\020" +
    "\005\111\010\115\011\113\012\107\013\117\014\110\017" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\226\005\026\010\033\011\032\012" +
    "\022\014\024\017\031\001\001\000\020\005\111\010\115" +
    "\011\113\012\107\013\117\014\110\017\112\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SALIDA ::= Cout Doble_Menor Palabra P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESPACIOS_NOMBRE ::= Using NameSpace Espacio_de_Nombre P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIOS_NOMBRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Include Libreria ESPACIOS_NOMBRE MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

