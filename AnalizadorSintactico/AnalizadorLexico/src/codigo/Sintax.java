
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 15 22:34:39 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 15 22:34:39 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\010\006\000\002\004\011\000\002\004\010" +
    "\000\002\006\004\000\002\006\003\000\002\006\004\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\004\000\002\007\005\000\002" +
    "\007\007\000\002\007\007\000\002\007\006\000\002\007" +
    "\006\000\002\007\005\000\002\007\007\000\002\007\007" +
    "\000\002\007\006\000\002\007\006\000\002\007\010\000" +
    "\002\007\010\000\002\007\011\000\002\007\011\000\002" +
    "\005\003\000\002\005\004\000\002\005\006\000\002\012" +
    "\011\000\002\020\003\000\002\020\005\000\002\020\007" +
    "\000\002\020\005\000\002\020\005\000\002\020\006\000" +
    "\002\020\007\000\002\013\015\000\002\014\012\000\002" +
    "\015\011\000\002\016\011\000\002\021\012\000\002\021" +
    "\011\000\002\023\011\000\002\024\010\000\002\024\011" +
    "\000\002\024\010\000\002\024\011\000\002\024\010\000" +
    "\002\022\006\000\002\022\010\000\002\022\006\000\002" +
    "\022\006\000\002\011\005\000\002\011\004\000\002\011" +
    "\004\000\002\003\005\000\002\017\004\000\002\017\004" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\004\054\005\001\002\000\004\002\367\001" +
    "\002\000\004\055\006\001\002\000\006\046\010\054\005" +
    "\001\002\000\006\012\017\042\016\001\002\000\004\047" +
    "\012\001\002\000\004\002\uffff\001\002\000\004\050\013" +
    "\001\002\000\004\044\014\001\002\000\006\012\ufffe\042" +
    "\ufffe\001\002\000\004\002\000\001\002\000\004\034\362" +
    "\001\002\000\004\042\020\001\002\000\004\034\021\001" +
    "\002\000\004\035\022\001\002\000\004\036\023\001\002" +
    "\000\030\007\036\011\035\012\033\013\041\014\043\016" +
    "\046\020\047\021\024\043\044\045\031\117\045\001\002" +
    "\000\004\034\327\001\002\000\036\006\ufff4\007\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\020\ufff4\021\ufff4" +
    "\037\ufff4\043\ufff4\045\ufff4\062\ufff4\117\ufff4\001\002\000" +
    "\032\007\036\011\035\012\033\013\041\014\043\016\046" +
    "\020\047\021\024\037\326\043\044\045\031\117\045\001" +
    "\002\000\036\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\020\ufffa\021\ufffa\037\ufffa\043\ufffa\045" +
    "\ufffa\062\ufffa\117\ufffa\001\002\000\036\006\uffef\007\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\016\uffef\020\uffef\021" +
    "\uffef\037\uffef\043\uffef\045\uffef\062\uffef\117\uffef\001\002" +
    "\000\004\022\260\001\002\000\036\006\ufff8\007\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\020\ufff8\021\ufff8" +
    "\037\ufff8\043\ufff8\045\ufff8\062\ufff8\117\ufff8\001\002\000" +
    "\010\032\243\045\176\132\177\001\002\000\036\006\ufff6" +
    "\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\020" +
    "\ufff6\021\ufff6\037\ufff6\043\ufff6\045\ufff6\062\ufff6\117\ufff6" +
    "\001\002\000\010\032\226\045\176\132\177\001\002\000" +
    "\004\010\223\001\002\000\036\006\uffec\007\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\016\uffec\020\uffec\021\uffec\037" +
    "\uffec\043\uffec\045\uffec\062\uffec\117\uffec\001\002\000\036" +
    "\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016" +
    "\uffeb\020\uffeb\021\uffeb\037\uffeb\043\uffeb\045\uffeb\062\uffeb" +
    "\117\uffeb\001\002\000\006\045\176\132\177\001\002\000" +
    "\036\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\016\ufff2\020\ufff2\021\ufff2\037\ufff2\043\ufff2\045\ufff2\062" +
    "\ufff2\117\ufff2\001\002\000\004\034\164\001\002\000\004" +
    "\053\154\001\002\000\004\034\113\001\002\000\004\036" +
    "\104\001\002\000\004\034\051\001\002\000\036\006\ufff0" +
    "\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\020" +
    "\ufff0\021\ufff0\037\ufff0\043\ufff0\045\ufff0\062\ufff0\117\ufff0" +
    "\001\002\000\006\033\053\045\054\001\002\000\004\035" +
    "\067\001\002\000\006\035\uffd7\044\uffd7\001\002\000\004" +
    "\030\055\001\002\000\012\005\057\033\060\045\061\051" +
    "\056\001\002\000\010\027\065\035\uffd4\044\uffd4\001\002" +
    "\000\006\005\062\045\063\001\002\000\006\035\uffd6\044" +
    "\uffd6\001\002\000\006\035\uffd3\044\uffd3\001\002\000\006" +
    "\035\uffd2\044\uffd2\001\002\000\004\005\064\001\002\000" +
    "\006\035\uffd1\044\uffd1\001\002\000\006\033\053\045\054" +
    "\001\002\000\006\035\uffd5\044\uffd5\001\002\000\004\036" +
    "\070\001\002\000\030\007\036\011\035\012\033\013\041" +
    "\014\043\016\046\020\047\021\024\043\044\045\031\117" +
    "\045\001\002\000\032\007\036\011\035\012\033\013\041" +
    "\014\043\016\046\020\047\021\024\037\076\043\044\045" +
    "\031\117\045\001\002\000\036\006\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\016\ufff5\020\ufff5\021\ufff5\037" +
    "\ufff5\043\ufff5\045\ufff5\062\ufff5\117\ufff5\001\002\000\036" +
    "\006\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016" +
    "\ufffb\020\ufffb\021\ufffb\037\ufffb\043\ufffb\045\ufffb\062\ufffb" +
    "\117\ufffb\001\002\000\036\006\uffee\007\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\016\uffee\020\uffee\021\uffee\037\uffee" +
    "\043\uffee\045\uffee\062\uffee\117\uffee\001\002\000\036\006" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9" +
    "\020\ufff9\021\ufff9\037\ufff9\043\ufff9\045\ufff9\062\ufff9\117" +
    "\ufff9\001\002\000\036\006\uffce\007\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\016\uffce\020\uffce\021\uffce\037\uffce\043" +
    "\uffce\045\uffce\062\uffce\117\uffce\001\002\000\036\006\ufff7" +
    "\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\020" +
    "\ufff7\021\ufff7\037\ufff7\043\ufff7\045\ufff7\062\ufff7\117\ufff7" +
    "\001\002\000\036\006\uffed\007\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\016\uffed\020\uffed\021\uffed\037\uffed\043\uffed" +
    "\045\uffed\062\uffed\117\uffed\001\002\000\036\006\uffea\007" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea\020\uffea" +
    "\021\uffea\037\uffea\043\uffea\045\uffea\062\uffea\117\uffea\001" +
    "\002\000\036\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\016\ufff3\020\ufff3\021\ufff3\037\ufff3\043\ufff3\045" +
    "\ufff3\062\ufff3\117\ufff3\001\002\000\036\006\ufff1\007\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\020\ufff1\021" +
    "\ufff1\037\ufff1\043\ufff1\045\ufff1\062\ufff1\117\ufff1\001\002" +
    "\000\030\007\036\011\035\012\033\013\041\014\043\016" +
    "\046\020\047\021\024\043\044\045\031\117\045\001\002" +
    "\000\032\006\106\007\036\011\035\012\033\013\041\014" +
    "\043\016\046\020\047\021\024\043\044\045\031\117\045" +
    "\001\002\000\004\034\107\001\002\000\006\033\053\045" +
    "\054\001\002\000\004\035\111\001\002\000\004\044\112" +
    "\001\002\000\036\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\016\uffcf\020\uffcf\021\uffcf\037\uffcf\043\uffcf" +
    "\045\uffcf\062\uffcf\117\uffcf\001\002\000\004\045\114\001" +
    "\002\000\004\035\115\001\002\000\004\036\116\001\002" +
    "\000\004\057\117\001\002\000\006\045\143\051\142\001" +
    "\002\000\010\037\121\056\123\057\122\001\002\000\036" +
    "\006\uffca\007\uffca\011\uffca\012\uffca\013\uffca\014\uffca\016" +
    "\uffca\020\uffca\021\uffca\037\uffca\043\uffca\045\uffca\062\uffca" +
    "\117\uffca\001\002\000\006\045\131\051\130\001\002\000" +
    "\004\017\124\001\002\000\030\007\036\011\035\012\033" +
    "\013\041\014\043\016\046\020\047\021\024\043\044\045" +
    "\031\117\045\001\002\000\032\007\036\011\035\012\033" +
    "\013\041\014\043\016\046\020\047\021\024\043\044\045" +
    "\031\062\126\117\045\001\002\000\004\044\127\001\002" +
    "\000\010\037\uffc5\056\uffc5\057\uffc5\001\002\000\004\017" +
    "\136\001\002\000\004\017\132\001\002\000\030\007\036" +
    "\011\035\012\033\013\041\014\043\016\046\020\047\021" +
    "\024\043\044\045\031\117\045\001\002\000\032\007\036" +
    "\011\035\012\033\013\041\014\043\016\046\020\047\021" +
    "\024\043\044\045\031\062\134\117\045\001\002\000\004" +
    "\044\135\001\002\000\010\037\uffc6\056\uffc6\057\uffc6\001" +
    "\002\000\030\007\036\011\035\012\033\013\041\014\043" +
    "\016\046\020\047\021\024\043\044\045\031\117\045\001" +
    "\002\000\032\007\036\011\035\012\033\013\041\014\043" +
    "\016\046\020\047\021\024\043\044\045\031\062\140\117" +
    "\045\001\002\000\004\044\141\001\002\000\010\037\uffc8" +
    "\056\uffc8\057\uffc8\001\002\000\004\017\150\001\002\000" +
    "\004\017\144\001\002\000\030\007\036\011\035\012\033" +
    "\013\041\014\043\016\046\020\047\021\024\043\044\045" +
    "\031\117\045\001\002\000\032\007\036\011\035\012\033" +
    "\013\041\014\043\016\046\020\047\021\024\043\044\045" +
    "\031\062\146\117\045\001\002\000\004\044\147\001\002" +
    "\000\010\037\uffc7\056\uffc7\057\uffc7\001\002\000\030\007" +
    "\036\011\035\012\033\013\041\014\043\016\046\020\047" +
    "\021\024\043\044\045\031\117\045\001\002\000\032\007" +
    "\036\011\035\012\033\013\041\014\043\016\046\020\047" +
    "\021\024\043\044\045\031\062\152\117\045\001\002\000" +
    "\004\044\153\001\002\000\010\037\uffc9\056\uffc9\057\uffc9" +
    "\001\002\000\006\045\156\052\155\001\002\000\006\044" +
    "\160\053\161\001\002\000\004\044\157\001\002\000\036" +
    "\006\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\016" +
    "\uffc4\020\uffc4\021\uffc4\037\uffc4\043\uffc4\045\uffc4\062\uffc4" +
    "\117\uffc4\001\002\000\036\006\uffc2\007\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\016\uffc2\020\uffc2\021\uffc2\037\uffc2" +
    "\043\uffc2\045\uffc2\062\uffc2\117\uffc2\001\002\000\004\045" +
    "\162\001\002\000\004\044\163\001\002\000\036\006\uffc3" +
    "\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\020" +
    "\uffc3\021\uffc3\037\uffc3\043\uffc3\045\uffc3\062\uffc3\117\uffc3" +
    "\001\002\000\006\033\053\045\054\001\002\000\004\035" +
    "\166\001\002\000\004\036\167\001\002\000\030\007\036" +
    "\011\035\012\033\013\041\014\043\016\046\020\047\021" +
    "\024\043\044\045\031\117\045\001\002\000\032\007\036" +
    "\011\035\012\033\013\041\014\043\016\046\020\047\021" +
    "\024\037\171\043\044\045\031\117\045\001\002\000\040" +
    "\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\172\016\uffd8\020\uffd8\021\uffd8\037\uffd8\043\uffd8\045\uffd8" +
    "\062\uffd8\117\uffd8\001\002\000\004\036\173\001\002\000" +
    "\030\007\036\011\035\012\033\013\041\014\043\016\046" +
    "\020\047\021\024\043\044\045\031\117\045\001\002\000" +
    "\032\007\036\011\035\012\033\013\041\014\043\016\046" +
    "\020\047\021\024\037\175\043\044\045\031\117\045\001" +
    "\002\000\036\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\016\uffd0\020\uffd0\021\uffd0\037\uffd0\043\uffd0\045" +
    "\uffd0\062\uffd0\117\uffd0\001\002\000\014\022\uffdb\031\uffdb" +
    "\032\uffdb\040\220\044\uffdb\001\002\000\006\045\176\132" +
    "\177\001\002\000\006\022\202\031\201\001\002\000\004" +
    "\005\211\001\002\000\004\005\203\001\002\000\006\005" +
    "\204\045\205\001\002\000\004\044\210\001\002\000\004" +
    "\005\206\001\002\000\004\044\207\001\002\000\036\006" +
    "\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc" +
    "\020\uffdc\021\uffdc\037\uffdc\043\uffdc\045\uffdc\062\uffdc\117" +
    "\uffdc\001\002\000\036\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\016\uffde\020\uffde\021\uffde\037\uffde\043" +
    "\uffde\045\uffde\062\uffde\117\uffde\001\002\000\006\005\212" +
    "\045\213\001\002\000\004\044\216\001\002\000\004\005" +
    "\214\001\002\000\004\044\215\001\002\000\036\006\uffdd" +
    "\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\020" +
    "\uffdd\021\uffdd\037\uffdd\043\uffdd\045\uffdd\062\uffdd\117\uffdd" +
    "\001\002\000\036\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\016\uffdf\020\uffdf\021\uffdf\037\uffdf\043\uffdf" +
    "\045\uffdf\062\uffdf\117\uffdf\001\002\000\012\022\uffda\031" +
    "\uffda\032\uffda\044\uffda\001\002\000\004\051\221\001\002" +
    "\000\004\041\222\001\002\000\012\022\uffd9\031\uffd9\032" +
    "\uffd9\044\uffd9\001\002\000\004\045\224\001\002\000\004" +
    "\044\225\001\002\000\036\006\uffc1\007\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\016\uffc1\020\uffc1\021\uffc1\037\uffc1" +
    "\043\uffc1\045\uffc1\062\uffc1\117\uffc1\001\002\000\006\045" +
    "\176\132\177\001\002\000\012\022\233\031\230\032\232" +
    "\044\231\001\002\000\004\051\237\001\002\000\036\006" +
    "\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4" +
    "\020\uffe4\021\uffe4\037\uffe4\043\uffe4\045\uffe4\062\uffe4\117" +
    "\uffe4\001\002\000\004\044\236\001\002\000\004\051\234" +
    "\001\002\000\004\044\235\001\002\000\036\006\uffe2\007" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2" +
    "\021\uffe2\037\uffe2\043\uffe2\045\uffe2\062\uffe2\117\uffe2\001" +
    "\002\000\036\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\016\uffe1\020\uffe1\021\uffe1\037\uffe1\043\uffe1\045" +
    "\uffe1\062\uffe1\117\uffe1\001\002\000\004\044\240\001\002" +
    "\000\036\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\020\uffe3\021\uffe3\037\uffe3\043\uffe3\045\uffe3" +
    "\062\uffe3\117\uffe3\001\002\000\004\044\242\001\002\000" +
    "\036\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\016\uffe0\020\uffe0\021\uffe0\037\uffe0\043\uffe0\045\uffe0\062" +
    "\uffe0\117\uffe0\001\002\000\006\045\176\132\177\001\002" +
    "\000\012\022\250\031\245\032\247\044\246\001\002\000" +
    "\004\051\254\001\002\000\036\006\uffe9\007\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\016\uffe9\020\uffe9\021\uffe9\037" +
    "\uffe9\043\uffe9\045\uffe9\062\uffe9\117\uffe9\001\002\000\004" +
    "\044\253\001\002\000\004\051\251\001\002\000\004\044" +
    "\252\001\002\000\036\006\uffe7\007\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\016\uffe7\020\uffe7\021\uffe7\037\uffe7\043" +
    "\uffe7\045\uffe7\062\uffe7\117\uffe7\001\002\000\036\006\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\020" +
    "\uffe6\021\uffe6\037\uffe6\043\uffe6\045\uffe6\062\uffe6\117\uffe6" +
    "\001\002\000\004\044\255\001\002\000\036\006\uffe8\007" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\020\uffe8" +
    "\021\uffe8\037\uffe8\043\uffe8\045\uffe8\062\uffe8\117\uffe8\001" +
    "\002\000\004\044\257\001\002\000\036\006\uffe5\007\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\020\uffe5\021" +
    "\uffe5\037\uffe5\043\uffe5\045\uffe5\062\uffe5\117\uffe5\001\002" +
    "\000\006\045\263\051\261\001\002\000\014\023\314\024" +
    "\313\025\315\026\311\044\312\001\002\000\036\006\uffbd" +
    "\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\020" +
    "\uffbd\021\uffbd\037\uffbd\043\uffbd\045\uffbd\062\uffbd\117\uffbd" +
    "\001\002\000\014\023\267\024\266\025\270\026\264\044" +
    "\265\001\002\000\006\045\306\051\305\001\002\000\036" +
    "\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\016" +
    "\uffbb\020\uffbb\021\uffbb\037\uffbb\043\uffbb\045\uffbb\062\uffbb" +
    "\117\uffbb\001\002\000\006\045\302\051\301\001\002\000" +
    "\006\045\276\051\275\001\002\000\006\045\272\051\271" +
    "\001\002\000\004\044\274\001\002\000\004\044\273\001" +
    "\002\000\036\006\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\016\uffb4\020\uffb4\021\uffb4\037\uffb4\043\uffb4\045" +
    "\uffb4\062\uffb4\117\uffb4\001\002\000\036\006\uffb2\007\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\020\uffb2\021" +
    "\uffb2\037\uffb2\043\uffb2\045\uffb2\062\uffb2\117\uffb2\001\002" +
    "\000\004\044\300\001\002\000\004\044\277\001\002\000" +
    "\036\006\uffba\007\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\016\uffba\020\uffba\021\uffba\037\uffba\043\uffba\045\uffba\062" +
    "\uffba\117\uffba\001\002\000\036\006\uffb8\007\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\016\uffb8\020\uffb8\021\uffb8\037" +
    "\uffb8\043\uffb8\045\uffb8\062\uffb8\117\uffb8\001\002\000\004" +
    "\044\304\001\002\000\004\044\303\001\002\000\036\006" +
    "\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7" +
    "\020\uffb7\021\uffb7\037\uffb7\043\uffb7\045\uffb7\062\uffb7\117" +
    "\uffb7\001\002\000\036\006\uffb5\007\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\016\uffb5\020\uffb5\021\uffb5\037\uffb5\043" +
    "\uffb5\045\uffb5\062\uffb5\117\uffb5\001\002\000\004\044\310" +
    "\001\002\000\004\044\307\001\002\000\036\006\uffb1\007" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\020\uffb1" +
    "\021\uffb1\037\uffb1\043\uffb1\045\uffb1\062\uffb1\117\uffb1\001" +
    "\002\000\036\006\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\016\uffaf\020\uffaf\021\uffaf\037\uffaf\043\uffaf\045" +
    "\uffaf\062\uffaf\117\uffaf\001\002\000\004\045\324\001\002" +
    "\000\036\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\016\uffbc\020\uffbc\021\uffbc\037\uffbc\043\uffbc\045\uffbc" +
    "\062\uffbc\117\uffbc\001\002\000\004\045\322\001\002\000" +
    "\004\045\320\001\002\000\004\045\316\001\002\000\004" +
    "\044\317\001\002\000\036\006\uffb3\007\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\016\uffb3\020\uffb3\021\uffb3\037\uffb3" +
    "\043\uffb3\045\uffb3\062\uffb3\117\uffb3\001\002\000\004\044" +
    "\321\001\002\000\036\006\uffb9\007\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\016\uffb9\020\uffb9\021\uffb9\037\uffb9\043" +
    "\uffb9\045\uffb9\062\uffb9\117\uffb9\001\002\000\004\044\323" +
    "\001\002\000\036\006\uffb6\007\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\016\uffb6\020\uffb6\021\uffb6\037\uffb6\043\uffb6" +
    "\045\uffb6\062\uffb6\117\uffb6\001\002\000\004\044\325\001" +
    "\002\000\036\006\uffb0\007\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\016\uffb0\020\uffb0\021\uffb0\037\uffb0\043\uffb0\045" +
    "\uffb0\062\uffb0\117\uffb0\001\002\000\004\002\ufffd\001\002" +
    "\000\006\011\331\045\332\001\002\000\004\035\356\001" +
    "\002\000\004\045\347\001\002\000\004\022\333\001\002" +
    "\000\004\051\334\001\002\000\004\044\335\001\002\000" +
    "\006\033\053\045\054\001\002\000\004\044\337\001\002" +
    "\000\006\032\341\045\342\001\002\000\004\035\uffcb\001" +
    "\002\000\004\045\346\001\002\000\006\031\343\032\344" +
    "\001\002\000\004\051\345\001\002\000\004\035\uffbf\001" +
    "\002\000\004\035\uffc0\001\002\000\004\035\uffbe\001\002" +
    "\000\004\022\350\001\002\000\004\051\351\001\002\000" +
    "\004\044\352\001\002\000\006\033\053\045\054\001\002" +
    "\000\004\044\354\001\002\000\006\032\341\045\342\001" +
    "\002\000\004\035\uffcc\001\002\000\004\036\357\001\002" +
    "\000\030\007\036\011\035\012\033\013\041\014\043\016" +
    "\046\020\047\021\024\043\044\045\031\117\045\001\002" +
    "\000\032\007\036\011\035\012\033\013\041\014\043\016" +
    "\046\020\047\021\024\037\361\043\044\045\031\117\045" +
    "\001\002\000\036\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\016\uffcd\020\uffcd\021\uffcd\037\uffcd\043\uffcd" +
    "\045\uffcd\062\uffcd\117\uffcd\001\002\000\004\035\363\001" +
    "\002\000\004\036\364\001\002\000\030\007\036\011\035" +
    "\012\033\013\041\014\043\016\046\020\047\021\024\043" +
    "\044\045\031\117\045\001\002\000\032\007\036\011\035" +
    "\012\033\013\041\014\043\016\046\020\047\021\024\037" +
    "\366\043\044\045\031\117\045\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\010\010\006\001\001\000\004" +
    "\004\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\037" +
    "\006\025\007\026\012\031\013\033\014\041\015\024\016" +
    "\047\022\036\023\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\100\007\072\012\074\013\076\014" +
    "\101\015\071\016\102\022\077\023\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\243\001\001\000\002\001\001\000\004" +
    "\005\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\037\006\070\007\026\012\031\013\033\014\041\015\024" +
    "\016\047\022\036\023\027\001\001\000\024\003\100\007" +
    "\072\012\074\013\076\014\101\015\071\016\102\022\077" +
    "\023\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\037\006\104\007\026" +
    "\012\031\013\033\014\041\015\024\016\047\022\036\023" +
    "\027\001\001\000\024\003\100\007\072\012\074\013\076" +
    "\014\101\015\071\016\102\022\077\023\073\001\001\000" +
    "\002\001\001\000\004\020\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\037\006\124" +
    "\007\026\012\031\013\033\014\041\015\024\016\047\022" +
    "\036\023\027\001\001\000\024\003\100\007\072\012\074" +
    "\013\076\014\101\015\071\016\102\022\077\023\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\037\006\132\007\026\012" +
    "\031\013\033\014\041\015\024\016\047\022\036\023\027" +
    "\001\001\000\024\003\100\007\072\012\074\013\076\014" +
    "\101\015\071\016\102\022\077\023\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\037\006\136\007" +
    "\026\012\031\013\033\014\041\015\024\016\047\022\036" +
    "\023\027\001\001\000\024\003\100\007\072\012\074\013" +
    "\076\014\101\015\071\016\102\022\077\023\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\037\006\144\007\026\012\031" +
    "\013\033\014\041\015\024\016\047\022\036\023\027\001" +
    "\001\000\024\003\100\007\072\012\074\013\076\014\101" +
    "\015\071\016\102\022\077\023\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\037\006\150\007\026" +
    "\012\031\013\033\014\041\015\024\016\047\022\036\023" +
    "\027\001\001\000\024\003\100\007\072\012\074\013\076" +
    "\014\101\015\071\016\102\022\077\023\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\037\006\167\007\026\012\031\013\033" +
    "\014\041\015\024\016\047\022\036\023\027\001\001\000" +
    "\024\003\100\007\072\012\074\013\076\014\101\015\071" +
    "\016\102\022\077\023\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\037\006\173\007\026\012\031" +
    "\013\033\014\041\015\024\016\047\022\036\023\027\001" +
    "\001\000\024\003\100\007\072\012\074\013\076\014\101" +
    "\015\071\016\102\022\077\023\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\335\001\001\000\002\001\001\000\004" +
    "\011\337\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\352\001\001\000\002" +
    "\001\001\000\004\011\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\037\006\357\007\026\012\031" +
    "\013\033\014\041\015\024\016\047\022\036\023\027\001" +
    "\001\000\024\003\100\007\072\012\074\013\076\014\101" +
    "\015\071\016\102\022\077\023\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\037" +
    "\006\364\007\026\012\031\013\033\014\041\015\024\016" +
    "\047\022\036\023\027\001\001\000\024\003\100\007\072" +
    "\012\074\013\076\014\101\015\071\016\102\022\077\023" +
    "\073\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION ::= Identificador Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION ::= Numero Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION ::= Identificador Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION ::= Identificador Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION ::= Numero Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION ::= Identificador Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION ::= Identificador Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION ::= Numero Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION ::= Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION ::= Identificador Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACION ::= Numero Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION ::= Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION ::= Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION ::= Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= Identificador Igual OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SALIDA_ENTRADA ::= Cin Doble_Mayor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SALIDA_ENTRADA ::= Cout Doble_Menor Palabra P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SALIDA_ENTRADA ::= Cout Doble_Menor Palabra Doble_Menor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SALIDA_ENTRADA ::= Cout Doble_Menor Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA_ENTRADA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Default Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Identificador Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_SWITCH ::= Case Identificador Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_SWITCH ::= Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DO_WHILE ::= Do Llave_a SENTENCIA Do_cierre Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero Op_logico SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLE ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARIABLE ::= Variables VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARIABLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Cadena VARIABLE Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Cadena VARIABLE Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena VARIABLE Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena VARIABLE Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= T_dato Op_incremento VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T_dato VARIABLE Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= T_dato VARIABLE Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato VARIABLE Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Int Op_incremento VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int VARIABLE Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int VARIABLE Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int VARIABLE Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SALIDA_ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA SALIDA_ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESPACIOS_NOMBRE ::= Using NameSpace Espacio_de_Nombre P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIOS_NOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Include Libreria INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Include Libreria ESPACIOS_NOMBRE MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

